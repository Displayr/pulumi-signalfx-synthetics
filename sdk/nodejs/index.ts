// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SyntheticsApiV2CheckArgs, SyntheticsApiV2CheckResult, SyntheticsApiV2CheckOutputArgs } from "./syntheticsApiV2Check";
export const syntheticsApiV2Check: typeof import("./syntheticsApiV2Check").syntheticsApiV2Check = null as any;
export const syntheticsApiV2CheckOutput: typeof import("./syntheticsApiV2Check").syntheticsApiV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsApiV2Check","syntheticsApiV2CheckOutput"], () => require("./syntheticsApiV2Check"));

export { SyntheticsBrowserV2CheckArgs, SyntheticsBrowserV2CheckResult, SyntheticsBrowserV2CheckOutputArgs } from "./syntheticsBrowserV2Check";
export const syntheticsBrowserV2Check: typeof import("./syntheticsBrowserV2Check").syntheticsBrowserV2Check = null as any;
export const syntheticsBrowserV2CheckOutput: typeof import("./syntheticsBrowserV2Check").syntheticsBrowserV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsBrowserV2Check","syntheticsBrowserV2CheckOutput"], () => require("./syntheticsBrowserV2Check"));

export { SyntheticsCheckArgs, SyntheticsCheckResult, SyntheticsCheckOutputArgs } from "./syntheticsCheck";
export const syntheticsCheck: typeof import("./syntheticsCheck").syntheticsCheck = null as any;
export const syntheticsCheckOutput: typeof import("./syntheticsCheck").syntheticsCheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsCheck","syntheticsCheckOutput"], () => require("./syntheticsCheck"));

export { SyntheticsCreateApiCheckV2Args, SyntheticsCreateApiCheckV2State } from "./syntheticsCreateApiCheckV2";
export type SyntheticsCreateApiCheckV2 = import("./syntheticsCreateApiCheckV2").SyntheticsCreateApiCheckV2;
export const SyntheticsCreateApiCheckV2: typeof import("./syntheticsCreateApiCheckV2").SyntheticsCreateApiCheckV2 = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateApiCheckV2"], () => require("./syntheticsCreateApiCheckV2"));

export { SyntheticsCreateBrowserCheckArgs, SyntheticsCreateBrowserCheckState } from "./syntheticsCreateBrowserCheck";
export type SyntheticsCreateBrowserCheck = import("./syntheticsCreateBrowserCheck").SyntheticsCreateBrowserCheck;
export const SyntheticsCreateBrowserCheck: typeof import("./syntheticsCreateBrowserCheck").SyntheticsCreateBrowserCheck = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateBrowserCheck"], () => require("./syntheticsCreateBrowserCheck"));

export { SyntheticsCreateBrowserCheckV2Args, SyntheticsCreateBrowserCheckV2State } from "./syntheticsCreateBrowserCheckV2";
export type SyntheticsCreateBrowserCheckV2 = import("./syntheticsCreateBrowserCheckV2").SyntheticsCreateBrowserCheckV2;
export const SyntheticsCreateBrowserCheckV2: typeof import("./syntheticsCreateBrowserCheckV2").SyntheticsCreateBrowserCheckV2 = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateBrowserCheckV2"], () => require("./syntheticsCreateBrowserCheckV2"));

export { SyntheticsCreateHttpCheckArgs, SyntheticsCreateHttpCheckState } from "./syntheticsCreateHttpCheck";
export type SyntheticsCreateHttpCheck = import("./syntheticsCreateHttpCheck").SyntheticsCreateHttpCheck;
export const SyntheticsCreateHttpCheck: typeof import("./syntheticsCreateHttpCheck").SyntheticsCreateHttpCheck = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateHttpCheck"], () => require("./syntheticsCreateHttpCheck"));

export { SyntheticsCreateHttpCheckV2Args, SyntheticsCreateHttpCheckV2State } from "./syntheticsCreateHttpCheckV2";
export type SyntheticsCreateHttpCheckV2 = import("./syntheticsCreateHttpCheckV2").SyntheticsCreateHttpCheckV2;
export const SyntheticsCreateHttpCheckV2: typeof import("./syntheticsCreateHttpCheckV2").SyntheticsCreateHttpCheckV2 = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateHttpCheckV2"], () => require("./syntheticsCreateHttpCheckV2"));

export { SyntheticsCreateLocationV2Args, SyntheticsCreateLocationV2State } from "./syntheticsCreateLocationV2";
export type SyntheticsCreateLocationV2 = import("./syntheticsCreateLocationV2").SyntheticsCreateLocationV2;
export const SyntheticsCreateLocationV2: typeof import("./syntheticsCreateLocationV2").SyntheticsCreateLocationV2 = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateLocationV2"], () => require("./syntheticsCreateLocationV2"));

export { SyntheticsCreatePortCheckV2Args, SyntheticsCreatePortCheckV2State } from "./syntheticsCreatePortCheckV2";
export type SyntheticsCreatePortCheckV2 = import("./syntheticsCreatePortCheckV2").SyntheticsCreatePortCheckV2;
export const SyntheticsCreatePortCheckV2: typeof import("./syntheticsCreatePortCheckV2").SyntheticsCreatePortCheckV2 = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreatePortCheckV2"], () => require("./syntheticsCreatePortCheckV2"));

export { SyntheticsCreateVariableV2Args, SyntheticsCreateVariableV2State } from "./syntheticsCreateVariableV2";
export type SyntheticsCreateVariableV2 = import("./syntheticsCreateVariableV2").SyntheticsCreateVariableV2;
export const SyntheticsCreateVariableV2: typeof import("./syntheticsCreateVariableV2").SyntheticsCreateVariableV2 = null as any;
utilities.lazyLoad(exports, ["SyntheticsCreateVariableV2"], () => require("./syntheticsCreateVariableV2"));

export { SyntheticsDevicesV2CheckArgs, SyntheticsDevicesV2CheckResult, SyntheticsDevicesV2CheckOutputArgs } from "./syntheticsDevicesV2Check";
export const syntheticsDevicesV2Check: typeof import("./syntheticsDevicesV2Check").syntheticsDevicesV2Check = null as any;
export const syntheticsDevicesV2CheckOutput: typeof import("./syntheticsDevicesV2Check").syntheticsDevicesV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsDevicesV2Check","syntheticsDevicesV2CheckOutput"], () => require("./syntheticsDevicesV2Check"));

export { SyntheticsHttpV2CheckArgs, SyntheticsHttpV2CheckResult, SyntheticsHttpV2CheckOutputArgs } from "./syntheticsHttpV2Check";
export const syntheticsHttpV2Check: typeof import("./syntheticsHttpV2Check").syntheticsHttpV2Check = null as any;
export const syntheticsHttpV2CheckOutput: typeof import("./syntheticsHttpV2Check").syntheticsHttpV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsHttpV2Check","syntheticsHttpV2CheckOutput"], () => require("./syntheticsHttpV2Check"));

export { SyntheticsLocationV2CheckArgs, SyntheticsLocationV2CheckResult, SyntheticsLocationV2CheckOutputArgs } from "./syntheticsLocationV2Check";
export const syntheticsLocationV2Check: typeof import("./syntheticsLocationV2Check").syntheticsLocationV2Check = null as any;
export const syntheticsLocationV2CheckOutput: typeof import("./syntheticsLocationV2Check").syntheticsLocationV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsLocationV2Check","syntheticsLocationV2CheckOutput"], () => require("./syntheticsLocationV2Check"));

export { SyntheticsLocationsV2CheckArgs, SyntheticsLocationsV2CheckResult, SyntheticsLocationsV2CheckOutputArgs } from "./syntheticsLocationsV2Check";
export const syntheticsLocationsV2Check: typeof import("./syntheticsLocationsV2Check").syntheticsLocationsV2Check = null as any;
export const syntheticsLocationsV2CheckOutput: typeof import("./syntheticsLocationsV2Check").syntheticsLocationsV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsLocationsV2Check","syntheticsLocationsV2CheckOutput"], () => require("./syntheticsLocationsV2Check"));

export { SyntheticsPortV2CheckArgs, SyntheticsPortV2CheckResult, SyntheticsPortV2CheckOutputArgs } from "./syntheticsPortV2Check";
export const syntheticsPortV2Check: typeof import("./syntheticsPortV2Check").syntheticsPortV2Check = null as any;
export const syntheticsPortV2CheckOutput: typeof import("./syntheticsPortV2Check").syntheticsPortV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsPortV2Check","syntheticsPortV2CheckOutput"], () => require("./syntheticsPortV2Check"));

export { SyntheticsVariableV2CheckArgs, SyntheticsVariableV2CheckResult, SyntheticsVariableV2CheckOutputArgs } from "./syntheticsVariableV2Check";
export const syntheticsVariableV2Check: typeof import("./syntheticsVariableV2Check").syntheticsVariableV2Check = null as any;
export const syntheticsVariableV2CheckOutput: typeof import("./syntheticsVariableV2Check").syntheticsVariableV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsVariableV2Check","syntheticsVariableV2CheckOutput"], () => require("./syntheticsVariableV2Check"));

export { SyntheticsVariablesV2CheckArgs, SyntheticsVariablesV2CheckResult, SyntheticsVariablesV2CheckOutputArgs } from "./syntheticsVariablesV2Check";
export const syntheticsVariablesV2Check: typeof import("./syntheticsVariablesV2Check").syntheticsVariablesV2Check = null as any;
export const syntheticsVariablesV2CheckOutput: typeof import("./syntheticsVariablesV2Check").syntheticsVariablesV2CheckOutput = null as any;
utilities.lazyLoad(exports, ["syntheticsVariablesV2Check","syntheticsVariablesV2CheckOutput"], () => require("./syntheticsVariablesV2Check"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "synthetics:index/syntheticsCreateApiCheckV2:SyntheticsCreateApiCheckV2":
                return new SyntheticsCreateApiCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreateBrowserCheck:SyntheticsCreateBrowserCheck":
                return new SyntheticsCreateBrowserCheck(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreateBrowserCheckV2:SyntheticsCreateBrowserCheckV2":
                return new SyntheticsCreateBrowserCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreateHttpCheck:SyntheticsCreateHttpCheck":
                return new SyntheticsCreateHttpCheck(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreateHttpCheckV2:SyntheticsCreateHttpCheckV2":
                return new SyntheticsCreateHttpCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreateLocationV2:SyntheticsCreateLocationV2":
                return new SyntheticsCreateLocationV2(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreatePortCheckV2:SyntheticsCreatePortCheckV2":
                return new SyntheticsCreatePortCheckV2(name, <any>undefined, { urn })
            case "synthetics:index/syntheticsCreateVariableV2:SyntheticsCreateVariableV2":
                return new SyntheticsCreateVariableV2(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateApiCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateBrowserCheck", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateBrowserCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateHttpCheck", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateHttpCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateLocationV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreatePortCheckV2", _module)
pulumi.runtime.registerResourceModule("synthetics", "index/syntheticsCreateVariableV2", _module)
pulumi.runtime.registerResourcePackage("synthetics", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:synthetics") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
