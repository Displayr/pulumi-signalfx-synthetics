// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * **Note**: This is a Rigor (Legacy) data source
 */
export function syntheticsCheck(args: SyntheticsCheckArgs, opts?: pulumi.InvokeOptions): Promise<SyntheticsCheckResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("synthetics:index/syntheticsCheck:syntheticsCheck", {
        "browsers": args.browsers,
        "checkConnections": args.checkConnections,
        "cookies": args.cookies,
        "createdAt": args.createdAt,
        "dnsOverrides": args.dnsOverrides,
        "excludedFiles": args.excludedFiles,
        "frequency": args.frequency,
        "id": args.id,
        "javascriptFiles": args.javascriptFiles,
        "links": args.links,
        "muted": args.muted,
        "paused": args.paused,
        "responseTimeMonitorMilliseconds": args.responseTimeMonitorMilliseconds,
        "steps": args.steps,
        "thresholdMonitors": args.thresholdMonitors,
        "type": args.type,
        "updatedAt": args.updatedAt,
        "viewports": args.viewports,
    }, opts);
}

/**
 * A collection of arguments for invoking syntheticsCheck.
 */
export interface SyntheticsCheckArgs {
    browsers?: inputs.SyntheticsCheckBrowser[];
    checkConnections?: inputs.SyntheticsCheckCheckConnection[];
    cookies?: inputs.SyntheticsCheckCookie[];
    createdAt?: string;
    dnsOverrides?: inputs.SyntheticsCheckDnsOverride[];
    excludedFiles?: inputs.SyntheticsCheckExcludedFile[];
    frequency?: number;
    id: number;
    javascriptFiles?: inputs.SyntheticsCheckJavascriptFile[];
    links?: inputs.SyntheticsCheckLink[];
    muted?: boolean;
    paused?: boolean;
    responseTimeMonitorMilliseconds?: number;
    steps?: inputs.SyntheticsCheckStep[];
    thresholdMonitors?: inputs.SyntheticsCheckThresholdMonitor[];
    type?: string;
    updatedAt?: string;
    viewports?: inputs.SyntheticsCheckViewport[];
}

/**
 * A collection of values returned by syntheticsCheck.
 */
export interface SyntheticsCheckResult {
    readonly autoRetry: boolean;
    readonly blackoutPeriods: outputs.SyntheticsCheckBlackoutPeriod[];
    readonly browsers?: outputs.SyntheticsCheckBrowser[];
    readonly checkConnections: outputs.SyntheticsCheckCheckConnection[];
    readonly cookies?: outputs.SyntheticsCheckCookie[];
    readonly createdAt: string;
    readonly dnsOverrides?: outputs.SyntheticsCheckDnsOverride[];
    readonly enabled: boolean;
    readonly excludedFiles?: outputs.SyntheticsCheckExcludedFile[];
    readonly frequency: number;
    readonly httpMethod: string;
    readonly httpRequestBody: string;
    readonly httpRequestHeaders: outputs.SyntheticsCheckHttpRequestHeader[];
    /**
     * The ID of this resource.
     */
    readonly id: number;
    readonly integrations: outputs.SyntheticsCheckIntegration[];
    readonly javascriptFiles?: outputs.SyntheticsCheckJavascriptFile[];
    readonly links: outputs.SyntheticsCheckLink[];
    readonly locations: outputs.SyntheticsCheckLocation[];
    readonly muted: boolean;
    readonly name: string;
    readonly notifications: outputs.SyntheticsCheckNotification[];
    readonly paused: boolean;
    readonly responseTimeMonitorMilliseconds: number;
    readonly roundRobin: boolean;
    readonly statuses: outputs.SyntheticsCheckStatus[];
    readonly steps?: outputs.SyntheticsCheckStep[];
    readonly successCriterias: outputs.SyntheticsCheckSuccessCriteria[];
    readonly tags: outputs.SyntheticsCheckTag[];
    readonly thresholdMonitors?: outputs.SyntheticsCheckThresholdMonitor[];
    readonly type: string;
    readonly updatedAt: string;
    readonly url: string;
    readonly viewports?: outputs.SyntheticsCheckViewport[];
}
/**
 * **Note**: This is a Rigor (Legacy) data source
 */
export function syntheticsCheckOutput(args: SyntheticsCheckOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SyntheticsCheckResult> {
    return pulumi.output(args).apply((a: any) => syntheticsCheck(a, opts))
}

/**
 * A collection of arguments for invoking syntheticsCheck.
 */
export interface SyntheticsCheckOutputArgs {
    browsers?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckBrowserArgs>[]>;
    checkConnections?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckCheckConnectionArgs>[]>;
    cookies?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckCookieArgs>[]>;
    createdAt?: pulumi.Input<string>;
    dnsOverrides?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckDnsOverrideArgs>[]>;
    excludedFiles?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckExcludedFileArgs>[]>;
    frequency?: pulumi.Input<number>;
    id: pulumi.Input<number>;
    javascriptFiles?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckJavascriptFileArgs>[]>;
    links?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckLinkArgs>[]>;
    muted?: pulumi.Input<boolean>;
    paused?: pulumi.Input<boolean>;
    responseTimeMonitorMilliseconds?: pulumi.Input<number>;
    steps?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckStepArgs>[]>;
    thresholdMonitors?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckThresholdMonitorArgs>[]>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    viewports?: pulumi.Input<pulumi.Input<inputs.SyntheticsCheckViewportArgs>[]>;
}
