// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as synthetics from "@pulumi/synthetics";
 *
 * const variableV2Foo = new synthetics.SyntheticsCreateVariableV2("variableV2Foo", {variables: [{
 *     description: "The most awesome variable. Full of snakes.",
 *     name: "terraform-test121",
 *     secret: false,
 *     value: "barv3--oopsasdasd",
 * }]});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class SyntheticsCreateVariableV2 extends pulumi.CustomResource {
    /**
     * Get an existing SyntheticsCreateVariableV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyntheticsCreateVariableV2State, opts?: pulumi.CustomResourceOptions): SyntheticsCreateVariableV2 {
        return new SyntheticsCreateVariableV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'synthetics:index/syntheticsCreateVariableV2:SyntheticsCreateVariableV2';

    /**
     * Returns true if the given object is an instance of SyntheticsCreateVariableV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyntheticsCreateVariableV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyntheticsCreateVariableV2.__pulumiType;
    }

    public readonly variables!: pulumi.Output<outputs.SyntheticsCreateVariableV2Variable[]>;

    /**
     * Create a SyntheticsCreateVariableV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyntheticsCreateVariableV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyntheticsCreateVariableV2Args | SyntheticsCreateVariableV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyntheticsCreateVariableV2State | undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as SyntheticsCreateVariableV2Args | undefined;
            if ((!args || args.variables === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variables'");
            }
            resourceInputs["variables"] = args ? args.variables : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyntheticsCreateVariableV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyntheticsCreateVariableV2 resources.
 */
export interface SyntheticsCreateVariableV2State {
    variables?: pulumi.Input<pulumi.Input<inputs.SyntheticsCreateVariableV2Variable>[]>;
}

/**
 * The set of arguments for constructing a SyntheticsCreateVariableV2 resource.
 */
export interface SyntheticsCreateVariableV2Args {
    variables: pulumi.Input<pulumi.Input<inputs.SyntheticsCreateVariableV2Variable>[]>;
}
