# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SyntheticsCreateHttpCheckArgs', 'SyntheticsCreateHttpCheck']

@pulumi.input_type
class SyntheticsCreateHttpCheckArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[int],
                 url: pulumi.Input[str],
                 auto_retry: Optional[pulumi.Input[bool]] = None,
                 blackout_periods: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]] = None,
                 check_connections: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckCheckConnectionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 http_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]] = None,
                 integrations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationArgs']]]] = None,
                 round_robin: Optional[pulumi.Input[bool]] = None,
                 success_criterias: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SyntheticsCreateHttpCheck resource.
        """
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "url", url)
        if auto_retry is not None:
            pulumi.set(__self__, "auto_retry", auto_retry)
        if blackout_periods is not None:
            pulumi.set(__self__, "blackout_periods", blackout_periods)
        if check_connections is not None:
            pulumi.set(__self__, "check_connections", check_connections)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_request_body is not None:
            pulumi.set(__self__, "http_request_body", http_request_body)
        if http_request_headers is not None:
            pulumi.set(__self__, "http_request_headers", http_request_headers)
        if integrations is not None:
            pulumi.set(__self__, "integrations", integrations)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if round_robin is not None:
            pulumi.set(__self__, "round_robin", round_robin)
        if success_criterias is not None:
            pulumi.set(__self__, "success_criterias", success_criterias)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="autoRetry")
    def auto_retry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_retry")

    @auto_retry.setter
    def auto_retry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_retry", value)

    @property
    @pulumi.getter(name="blackoutPeriods")
    def blackout_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]:
        return pulumi.get(self, "blackout_periods")

    @blackout_periods.setter
    def blackout_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]):
        pulumi.set(self, "blackout_periods", value)

    @property
    @pulumi.getter(name="checkConnections")
    def check_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]:
        return pulumi.get(self, "check_connections")

    @check_connections.setter
    def check_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]):
        pulumi.set(self, "check_connections", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_request_body")

    @http_request_body.setter
    def http_request_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_request_body", value)

    @property
    @pulumi.getter(name="httpRequestHeaders")
    def http_request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]:
        return pulumi.get(self, "http_request_headers")

    @http_request_headers.setter
    def http_request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]):
        pulumi.set(self, "http_request_headers", value)

    @property
    @pulumi.getter
    def integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "integrations")

    @integrations.setter
    def integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "integrations", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationArgs']]]]:
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "round_robin")

    @round_robin.setter
    def round_robin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "round_robin", value)

    @property
    @pulumi.getter(name="successCriterias")
    def success_criterias(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]:
        return pulumi.get(self, "success_criterias")

    @success_criterias.setter
    def success_criterias(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]):
        pulumi.set(self, "success_criterias", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SyntheticsCreateHttpCheckState:
    def __init__(__self__, *,
                 auto_retry: Optional[pulumi.Input[bool]] = None,
                 blackout_periods: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]] = None,
                 check_connections: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckCheckConnectionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 http_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]] = None,
                 integrations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationArgs']]]] = None,
                 round_robin: Optional[pulumi.Input[bool]] = None,
                 success_criterias: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SyntheticsCreateHttpCheck resources.
        """
        if auto_retry is not None:
            pulumi.set(__self__, "auto_retry", auto_retry)
        if blackout_periods is not None:
            pulumi.set(__self__, "blackout_periods", blackout_periods)
        if check_connections is not None:
            pulumi.set(__self__, "check_connections", check_connections)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_request_body is not None:
            pulumi.set(__self__, "http_request_body", http_request_body)
        if http_request_headers is not None:
            pulumi.set(__self__, "http_request_headers", http_request_headers)
        if integrations is not None:
            pulumi.set(__self__, "integrations", integrations)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)
        if round_robin is not None:
            pulumi.set(__self__, "round_robin", round_robin)
        if success_criterias is not None:
            pulumi.set(__self__, "success_criterias", success_criterias)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="autoRetry")
    def auto_retry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_retry")

    @auto_retry.setter
    def auto_retry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_retry", value)

    @property
    @pulumi.getter(name="blackoutPeriods")
    def blackout_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]:
        return pulumi.get(self, "blackout_periods")

    @blackout_periods.setter
    def blackout_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]):
        pulumi.set(self, "blackout_periods", value)

    @property
    @pulumi.getter(name="checkConnections")
    def check_connections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]:
        return pulumi.get(self, "check_connections")

    @check_connections.setter
    def check_connections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]):
        pulumi.set(self, "check_connections", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_request_body")

    @http_request_body.setter
    def http_request_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_request_body", value)

    @property
    @pulumi.getter(name="httpRequestHeaders")
    def http_request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]:
        return pulumi.get(self, "http_request_headers")

    @http_request_headers.setter
    def http_request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]):
        pulumi.set(self, "http_request_headers", value)

    @property
    @pulumi.getter
    def integrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "integrations")

    @integrations.setter
    def integrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "integrations", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationArgs']]]]:
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationArgs']]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "round_robin")

    @round_robin.setter
    def round_robin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "round_robin", value)

    @property
    @pulumi.getter(name="successCriterias")
    def success_criterias(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]:
        return pulumi.get(self, "success_criterias")

    @success_criterias.setter
    def success_criterias(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]):
        pulumi.set(self, "success_criterias", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class SyntheticsCreateHttpCheck(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_retry: Optional[pulumi.Input[bool]] = None,
                 blackout_periods: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]] = None,
                 check_connections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 http_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]] = None,
                 integrations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckNotificationArgs']]]]] = None,
                 round_robin: Optional[pulumi.Input[bool]] = None,
                 success_criterias: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        **Note**: This is a Rigor (Legacy) resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyntheticsCreateHttpCheckArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        **Note**: This is a Rigor (Legacy) resource

        :param str resource_name: The name of the resource.
        :param SyntheticsCreateHttpCheckArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyntheticsCreateHttpCheckArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_retry: Optional[pulumi.Input[bool]] = None,
                 blackout_periods: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]] = None,
                 check_connections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 http_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]] = None,
                 integrations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckNotificationArgs']]]]] = None,
                 round_robin: Optional[pulumi.Input[bool]] = None,
                 success_criterias: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyntheticsCreateHttpCheckArgs.__new__(SyntheticsCreateHttpCheckArgs)

            __props__.__dict__["auto_retry"] = auto_retry
            __props__.__dict__["blackout_periods"] = blackout_periods
            __props__.__dict__["check_connections"] = check_connections
            __props__.__dict__["enabled"] = enabled
            if frequency is None and not opts.urn:
                raise TypeError("Missing required property 'frequency'")
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["http_method"] = http_method
            __props__.__dict__["http_request_body"] = http_request_body
            __props__.__dict__["http_request_headers"] = http_request_headers
            __props__.__dict__["integrations"] = integrations
            __props__.__dict__["last_updated"] = last_updated
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["notifications"] = notifications
            __props__.__dict__["round_robin"] = round_robin
            __props__.__dict__["success_criterias"] = success_criterias
            __props__.__dict__["tags"] = tags
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        super(SyntheticsCreateHttpCheck, __self__).__init__(
            'synthetics:index/syntheticsCreateHttpCheck:SyntheticsCreateHttpCheck',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_retry: Optional[pulumi.Input[bool]] = None,
            blackout_periods: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckBlackoutPeriodArgs']]]]] = None,
            check_connections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckCheckConnectionArgs']]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            frequency: Optional[pulumi.Input[int]] = None,
            http_method: Optional[pulumi.Input[str]] = None,
            http_request_body: Optional[pulumi.Input[str]] = None,
            http_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckHttpRequestHeaderArgs']]]]] = None,
            integrations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckNotificationArgs']]]]] = None,
            round_robin: Optional[pulumi.Input[bool]] = None,
            success_criterias: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateHttpCheckSuccessCriteriaArgs']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'SyntheticsCreateHttpCheck':
        """
        Get an existing SyntheticsCreateHttpCheck resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyntheticsCreateHttpCheckState.__new__(_SyntheticsCreateHttpCheckState)

        __props__.__dict__["auto_retry"] = auto_retry
        __props__.__dict__["blackout_periods"] = blackout_periods
        __props__.__dict__["check_connections"] = check_connections
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["http_method"] = http_method
        __props__.__dict__["http_request_body"] = http_request_body
        __props__.__dict__["http_request_headers"] = http_request_headers
        __props__.__dict__["integrations"] = integrations
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["notifications"] = notifications
        __props__.__dict__["round_robin"] = round_robin
        __props__.__dict__["success_criterias"] = success_criterias
        __props__.__dict__["tags"] = tags
        __props__.__dict__["url"] = url
        return SyntheticsCreateHttpCheck(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRetry")
    def auto_retry(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "auto_retry")

    @property
    @pulumi.getter(name="blackoutPeriods")
    def blackout_periods(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsCreateHttpCheckBlackoutPeriod']]]:
        return pulumi.get(self, "blackout_periods")

    @property
    @pulumi.getter(name="checkConnections")
    def check_connections(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsCreateHttpCheckCheckConnection']]]:
        return pulumi.get(self, "check_connections")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[int]:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "http_request_body")

    @property
    @pulumi.getter(name="httpRequestHeaders")
    def http_request_headers(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsCreateHttpCheckHttpRequestHeader']]]:
        return pulumi.get(self, "http_request_headers")

    @property
    @pulumi.getter
    def integrations(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "integrations")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence[int]]]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotification']]]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "round_robin")

    @property
    @pulumi.getter(name="successCriterias")
    def success_criterias(self) -> pulumi.Output[Optional[Sequence['outputs.SyntheticsCreateHttpCheckSuccessCriteria']]]:
        return pulumi.get(self, "success_criterias")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "url")

