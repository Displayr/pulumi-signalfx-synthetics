# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SyntheticsCreateVariableV2Args', 'SyntheticsCreateVariableV2']

@pulumi.input_type
class SyntheticsCreateVariableV2Args:
    def __init__(__self__, *,
                 variables: pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateVariableV2VariableArgs']]]):
        """
        The set of arguments for constructing a SyntheticsCreateVariableV2 resource.
        """
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateVariableV2VariableArgs']]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateVariableV2VariableArgs']]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class _SyntheticsCreateVariableV2State:
    def __init__(__self__, *,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateVariableV2VariableArgs']]]] = None):
        """
        Input properties used for looking up and filtering SyntheticsCreateVariableV2 resources.
        """
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateVariableV2VariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateVariableV2VariableArgs']]]]):
        pulumi.set(self, "variables", value)


class SyntheticsCreateVariableV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateVariableV2VariableArgs']]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_synthetics as synthetics

        variable_v2_foo = synthetics.SyntheticsCreateVariableV2("variableV2Foo", variables=[synthetics.SyntheticsCreateVariableV2VariableArgs(
            description="The most awesome variable. Full of snakes.",
            name="terraform-test121",
            secret=False,
            value="barv3--oopsasdasd",
        )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyntheticsCreateVariableV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_synthetics as synthetics

        variable_v2_foo = synthetics.SyntheticsCreateVariableV2("variableV2Foo", variables=[synthetics.SyntheticsCreateVariableV2VariableArgs(
            description="The most awesome variable. Full of snakes.",
            name="terraform-test121",
            secret=False,
            value="barv3--oopsasdasd",
        )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SyntheticsCreateVariableV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyntheticsCreateVariableV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateVariableV2VariableArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyntheticsCreateVariableV2Args.__new__(SyntheticsCreateVariableV2Args)

            if variables is None and not opts.urn:
                raise TypeError("Missing required property 'variables'")
            __props__.__dict__["variables"] = variables
        super(SyntheticsCreateVariableV2, __self__).__init__(
            'synthetics:index/syntheticsCreateVariableV2:SyntheticsCreateVariableV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            variables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SyntheticsCreateVariableV2VariableArgs']]]]] = None) -> 'SyntheticsCreateVariableV2':
        """
        Get an existing SyntheticsCreateVariableV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyntheticsCreateVariableV2State.__new__(_SyntheticsCreateVariableV2State)

        __props__.__dict__["variables"] = variables
        return SyntheticsCreateVariableV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Sequence['outputs.SyntheticsCreateVariableV2Variable']]:
        return pulumi.get(self, "variables")

