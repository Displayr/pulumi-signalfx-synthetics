# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'SyntheticsCreateApiCheckV2Test',
    'SyntheticsCreateApiCheckV2TestRequest',
    'SyntheticsCreateApiCheckV2TestRequestConfiguration',
    'SyntheticsCreateApiCheckV2TestRequestSetup',
    'SyntheticsCreateApiCheckV2TestRequestValidation',
    'SyntheticsCreateBrowserCheckBlackoutPeriod',
    'SyntheticsCreateBrowserCheckBrowser',
    'SyntheticsCreateBrowserCheckCheckConnection',
    'SyntheticsCreateBrowserCheckCookie',
    'SyntheticsCreateBrowserCheckDnsOverride',
    'SyntheticsCreateBrowserCheckExcludedFile',
    'SyntheticsCreateBrowserCheckHttpRequestHeader',
    'SyntheticsCreateBrowserCheckJavascriptFile',
    'SyntheticsCreateBrowserCheckNotification',
    'SyntheticsCreateBrowserCheckNotificationEscalation',
    'SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow',
    'SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho',
    'SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink',
    'SyntheticsCreateBrowserCheckNotificationNotificationWindow',
    'SyntheticsCreateBrowserCheckNotificationNotifyWho',
    'SyntheticsCreateBrowserCheckNotificationNotifyWhoLink',
    'SyntheticsCreateBrowserCheckStep',
    'SyntheticsCreateBrowserCheckSuccessCriteria',
    'SyntheticsCreateBrowserCheckThresholdMonitor',
    'SyntheticsCreateBrowserCheckV2Test',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSetting',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthentication',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookie',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeader',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride',
    'SyntheticsCreateBrowserCheckV2TestTransaction',
    'SyntheticsCreateBrowserCheckV2TestTransactionStep',
    'SyntheticsCreateBrowserCheckV2TestTransactionStepOption',
    'SyntheticsCreateBrowserCheckViewport',
    'SyntheticsCreateHttpCheckBlackoutPeriod',
    'SyntheticsCreateHttpCheckCheckConnection',
    'SyntheticsCreateHttpCheckHttpRequestHeader',
    'SyntheticsCreateHttpCheckNotification',
    'SyntheticsCreateHttpCheckNotificationEscalation',
    'SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow',
    'SyntheticsCreateHttpCheckNotificationEscalationNotifyWho',
    'SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink',
    'SyntheticsCreateHttpCheckNotificationNotificationWindow',
    'SyntheticsCreateHttpCheckNotificationNotifyWho',
    'SyntheticsCreateHttpCheckNotificationNotifyWhoLink',
    'SyntheticsCreateHttpCheckSuccessCriteria',
    'SyntheticsCreateHttpCheckV2Test',
    'SyntheticsCreateHttpCheckV2TestHeader',
    'SyntheticsCreateLocationV2Location',
    'SyntheticsCreatePortCheckV2Test',
    'SyntheticsCreateVariableV2Variable',
    'SyntheticsApiV2CheckTestResult',
    'SyntheticsApiV2CheckTestDeviceResult',
    'SyntheticsApiV2CheckTestDeviceNetworkConnectionResult',
    'SyntheticsApiV2CheckTestRequestResult',
    'SyntheticsApiV2CheckTestRequestConfigurationResult',
    'SyntheticsApiV2CheckTestRequestSetupResult',
    'SyntheticsApiV2CheckTestRequestValidationResult',
    'SyntheticsBrowserV2CheckTestResult',
    'SyntheticsBrowserV2CheckTestAdvancedSettingResult',
    'SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationResult',
    'SyntheticsBrowserV2CheckTestAdvancedSettingCookieResult',
    'SyntheticsBrowserV2CheckTestAdvancedSettingHeaderResult',
    'SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideResult',
    'SyntheticsBrowserV2CheckTestBusinessTransactionResult',
    'SyntheticsBrowserV2CheckTestBusinessTransactionStepResult',
    'SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionResult',
    'SyntheticsBrowserV2CheckTestDeviceResult',
    'SyntheticsBrowserV2CheckTestDeviceNetworkConnectionResult',
    'SyntheticsBrowserV2CheckTestTransactionResult',
    'SyntheticsBrowserV2CheckTestTransactionStepResult',
    'SyntheticsBrowserV2CheckTestTransactionStepOptionResult',
    'SyntheticsCheckBlackoutPeriodResult',
    'SyntheticsCheckBrowserResult',
    'SyntheticsCheckCheckConnectionResult',
    'SyntheticsCheckCookieResult',
    'SyntheticsCheckDnsOverrideResult',
    'SyntheticsCheckExcludedFileResult',
    'SyntheticsCheckHttpRequestHeaderResult',
    'SyntheticsCheckIntegrationResult',
    'SyntheticsCheckJavascriptFileResult',
    'SyntheticsCheckLinkResult',
    'SyntheticsCheckLocationResult',
    'SyntheticsCheckNotificationResult',
    'SyntheticsCheckNotificationEscalationResult',
    'SyntheticsCheckNotificationEscalationNotificationWindowResult',
    'SyntheticsCheckNotificationEscalationNotifyWhoResult',
    'SyntheticsCheckNotificationEscalationNotifyWhoLinkResult',
    'SyntheticsCheckNotificationNotificationWindowResult',
    'SyntheticsCheckNotificationNotifyWhoResult',
    'SyntheticsCheckNotificationNotifyWhoLinkResult',
    'SyntheticsCheckStatusResult',
    'SyntheticsCheckStepResult',
    'SyntheticsCheckSuccessCriteriaResult',
    'SyntheticsCheckTagResult',
    'SyntheticsCheckThresholdMonitorResult',
    'SyntheticsCheckViewportResult',
    'SyntheticsDevicesV2CheckDeviceResult',
    'SyntheticsDevicesV2CheckDeviceNetworkConnectionResult',
    'SyntheticsHttpV2CheckTestResult',
    'SyntheticsHttpV2CheckTestHeaderResult',
    'SyntheticsLocationV2CheckLocationResult',
    'SyntheticsLocationV2CheckMetaResult',
    'SyntheticsLocationsV2CheckLocationResult',
    'SyntheticsPortV2CheckTestResult',
    'SyntheticsVariableV2CheckVariableResult',
    'SyntheticsVariablesV2CheckVariableResult',
]

@pulumi.output_type
class SyntheticsCreateApiCheckV2Test(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceId":
            suggest = "device_id"
        elif key == "locationIds":
            suggest = "location_ids"
        elif key == "schedulingStrategy":
            suggest = "scheduling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateApiCheckV2Test. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateApiCheckV2Test.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateApiCheckV2Test.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 device_id: int,
                 frequency: int,
                 location_ids: Sequence[str],
                 name: str,
                 requests: Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequest']] = None,
                 scheduling_strategy: Optional[str] = None):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Sequence[str]:
        return pulumi.get(self, "location_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def requests(self) -> Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequest']]:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[str]:
        return pulumi.get(self, "scheduling_strategy")


@pulumi.output_type
class SyntheticsCreateApiCheckV2TestRequest(dict):
    def __init__(__self__, *,
                 configurations: Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequestConfiguration']] = None,
                 setups: Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequestSetup']] = None,
                 validations: Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequestValidation']] = None):
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if setups is not None:
            pulumi.set(__self__, "setups", setups)
        if validations is not None:
            pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequestConfiguration']]:
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter
    def setups(self) -> Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequestSetup']]:
        return pulumi.get(self, "setups")

    @property
    @pulumi.getter
    def validations(self) -> Optional[Sequence['outputs.SyntheticsCreateApiCheckV2TestRequestValidation']]:
        return pulumi.get(self, "validations")


@pulumi.output_type
class SyntheticsCreateApiCheckV2TestRequestConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestMethod":
            suggest = "request_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateApiCheckV2TestRequestConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateApiCheckV2TestRequestConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateApiCheckV2TestRequestConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 headers: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 request_method: Optional[str] = None,
                 url: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsCreateApiCheckV2TestRequestSetup(dict):
    def __init__(__self__, *,
                 extractor: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None,
                 variable: Optional[str] = None):
        if extractor is not None:
            pulumi.set(__self__, "extractor", extractor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def extractor(self) -> Optional[str]:
        return pulumi.get(self, "extractor")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class SyntheticsCreateApiCheckV2TestRequestValidation(dict):
    def __init__(__self__, *,
                 actual: Optional[str] = None,
                 comparator: Optional[str] = None,
                 expected: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if actual is not None:
            pulumi.set(__self__, "actual", actual)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actual(self) -> Optional[str]:
        return pulumi.get(self, "actual")

    @property
    @pulumi.getter
    def comparator(self) -> Optional[str]:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def expected(self) -> Optional[str]:
        return pulumi.get(self, "expected")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateBrowserCheckBlackoutPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "durationInMinutes":
            suggest = "duration_in_minutes"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "isRepeat":
            suggest = "is_repeat"
        elif key == "monthlyRepeatType":
            suggest = "monthly_repeat_type"
        elif key == "repeatType":
            suggest = "repeat_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckBlackoutPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckBlackoutPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckBlackoutPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 duration_in_minutes: Optional[int] = None,
                 end_date: Optional[str] = None,
                 end_time: Optional[str] = None,
                 is_repeat: Optional[bool] = None,
                 monthly_repeat_type: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_time: Optional[str] = None,
                 timezone: Optional[str] = None,
                 updated_at: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if monthly_repeat_type is not None:
            pulumi.set(__self__, "monthly_repeat_type", monthly_repeat_type)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[bool]:
        return pulumi.get(self, "is_repeat")

    @property
    @pulumi.getter(name="monthlyRepeatType")
    def monthly_repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "monthly_repeat_type")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsCreateBrowserCheckBrowser(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateBrowserCheckCheckConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadBandwidth":
            suggest = "download_bandwidth"
        elif key == "packetLoss":
            suggest = "packet_loss"
        elif key == "uploadBandwidth":
            suggest = "upload_bandwidth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckCheckConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckCheckConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckCheckConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_bandwidth: Optional[int] = None,
                 latency: Optional[int] = None,
                 packet_loss: Optional[float] = None,
                 upload_bandwidth: Optional[int] = None):
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "download_bandwidth")

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[float]:
        return pulumi.get(self, "packet_loss")

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")


@pulumi.output_type
class SyntheticsCreateBrowserCheckCookie(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 key: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCreateBrowserCheckDnsOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originalDomain":
            suggest = "original_domain"
        elif key == "originalHost":
            suggest = "original_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckDnsOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckDnsOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckDnsOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 original_domain: Optional[str] = None,
                 original_host: Optional[str] = None):
        if original_domain is not None:
            pulumi.set(__self__, "original_domain", original_domain)
        if original_host is not None:
            pulumi.set(__self__, "original_host", original_host)

    @property
    @pulumi.getter(name="originalDomain")
    def original_domain(self) -> Optional[str]:
        return pulumi.get(self, "original_domain")

    @property
    @pulumi.getter(name="originalHost")
    def original_host(self) -> Optional[str]:
        return pulumi.get(self, "original_host")


@pulumi.output_type
class SyntheticsCreateBrowserCheckExcludedFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exclusionType":
            suggest = "exclusion_type"
        elif key == "presetName":
            suggest = "preset_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckExcludedFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckExcludedFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckExcludedFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclusion_type: Optional[str] = None,
                 pattern: Optional[str] = None,
                 preset_name: Optional[str] = None):
        if exclusion_type is not None:
            pulumi.set(__self__, "exclusion_type", exclusion_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if preset_name is not None:
            pulumi.set(__self__, "preset_name", preset_name)

    @property
    @pulumi.getter(name="exclusionType")
    def exclusion_type(self) -> Optional[str]:
        return pulumi.get(self, "exclusion_type")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="presetName")
    def preset_name(self) -> Optional[str]:
        return pulumi.get(self, "preset_name")


@pulumi.output_type
class SyntheticsCreateBrowserCheckHttpRequestHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAgent":
            suggest = "user_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckHttpRequestHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckHttpRequestHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckHttpRequestHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_agent: Optional[str] = None):
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[str]:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class SyntheticsCreateBrowserCheckJavascriptFile(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationWindows":
            suggest = "notification_windows"
        elif key == "notifyAfterFailureCount":
            suggest = "notify_after_failure_count"
        elif key == "notifyOnLocationFailure":
            suggest = "notify_on_location_failure"
        elif key == "notifyWhos":
            suggest = "notify_whos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call: Optional[bool] = None,
                 email: Optional[bool] = None,
                 escalations: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalation']] = None,
                 muted: Optional[bool] = None,
                 notification_windows: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationNotificationWindow']] = None,
                 notify_after_failure_count: Optional[int] = None,
                 notify_on_location_failure: Optional[bool] = None,
                 notify_whos: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationNotifyWho']] = None,
                 sms: Optional[bool] = None):
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if escalations is not None:
            pulumi.set(__self__, "escalations", escalations)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_after_failure_count is not None:
            pulumi.set(__self__, "notify_after_failure_count", notify_after_failure_count)
        if notify_on_location_failure is not None:
            pulumi.set(__self__, "notify_on_location_failure", notify_on_location_failure)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def escalations(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalation']]:
        return pulumi.get(self, "escalations")

    @property
    @pulumi.getter
    def muted(self) -> Optional[bool]:
        return pulumi.get(self, "muted")

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationNotificationWindow']]:
        return pulumi.get(self, "notification_windows")

    @property
    @pulumi.getter(name="notifyAfterFailureCount")
    def notify_after_failure_count(self) -> Optional[int]:
        return pulumi.get(self, "notify_after_failure_count")

    @property
    @pulumi.getter(name="notifyOnLocationFailure")
    def notify_on_location_failure(self) -> Optional[bool]:
        return pulumi.get(self, "notify_on_location_failure")

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationNotifyWho']]:
        return pulumi.get(self, "notify_whos")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationEscalation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterMinutes":
            suggest = "after_minutes"
        elif key == "isRepeat":
            suggest = "is_repeat"
        elif key == "notificationWindows":
            suggest = "notification_windows"
        elif key == "notifyWhos":
            suggest = "notify_whos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationEscalation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_minutes: Optional[int] = None,
                 call: Optional[bool] = None,
                 email: Optional[bool] = None,
                 is_repeat: Optional[bool] = None,
                 notification_windows: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow']] = None,
                 notify_whos: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho']] = None,
                 sms: Optional[bool] = None):
        if after_minutes is not None:
            pulumi.set(__self__, "after_minutes", after_minutes)
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter(name="afterMinutes")
    def after_minutes(self) -> Optional[int]:
        return pulumi.get(self, "after_minutes")

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[bool]:
        return pulumi.get(self, "is_repeat")

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow']]:
        return pulumi.get(self, "notification_windows")

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho']]:
        return pulumi.get(self, "notify_whos")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customUserEmail":
            suggest = "custom_user_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalationNotifyWho.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call: Optional[bool] = None,
                 custom_user_email: Optional[str] = None,
                 email: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink']] = None,
                 sms: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[str]:
        return pulumi.get(self, "custom_user_email")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfHtml":
            suggest = "self_html"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 self_html: Optional[str] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[str]:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationNotificationWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationNotificationWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationNotificationWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationNotificationWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationNotifyWho(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customUserEmail":
            suggest = "custom_user_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationNotifyWho. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationNotifyWho.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationNotifyWho.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call: Optional[bool] = None,
                 custom_user_email: Optional[str] = None,
                 email: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationNotifyWhoLink']] = None,
                 sms: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[str]:
        return pulumi.get(self, "custom_user_email")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckNotificationNotifyWhoLink']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateBrowserCheckNotificationNotifyWhoLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfHtml":
            suggest = "self_html"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckNotificationNotifyWhoLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckNotificationNotifyWhoLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckNotificationNotifyWhoLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 self_html: Optional[str] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[str]:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCreateBrowserCheckStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "itemMethod":
            suggest = "item_method"
        elif key == "variableName":
            suggest = "variable_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 how: Optional[str] = None,
                 item_method: Optional[str] = None,
                 name: Optional[str] = None,
                 position: Optional[int] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 what: Optional[str] = None):
        if how is not None:
            pulumi.set(__self__, "how", how)
        if item_method is not None:
            pulumi.set(__self__, "item_method", item_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if what is not None:
            pulumi.set(__self__, "what", what)

    @property
    @pulumi.getter
    def how(self) -> Optional[str]:
        return pulumi.get(self, "how")

    @property
    @pulumi.getter(name="itemMethod")
    def item_method(self) -> Optional[str]:
        return pulumi.get(self, "item_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> Optional[int]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter
    def what(self) -> Optional[str]:
        return pulumi.get(self, "what")


@pulumi.output_type
class SyntheticsCreateBrowserCheckSuccessCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "comparisonString":
            suggest = "comparison_string"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckSuccessCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckSuccessCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckSuccessCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 comparison_string: Optional[str] = None,
                 created_at: Optional[str] = None,
                 updated_at: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if comparison_string is not None:
            pulumi.set(__self__, "comparison_string", comparison_string)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="comparisonString")
    def comparison_string(self) -> Optional[str]:
        return pulumi.get(self, "comparison_string")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsCreateBrowserCheckThresholdMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonType":
            suggest = "comparison_type"
        elif key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckThresholdMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckThresholdMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckThresholdMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_type: Optional[str] = None,
                 matcher: Optional[str] = None,
                 metric_name: Optional[str] = None,
                 value: Optional[int] = None):
        if comparison_type is not None:
            pulumi.set(__self__, "comparison_type", comparison_type)
        if matcher is not None:
            pulumi.set(__self__, "matcher", matcher)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="comparisonType")
    def comparison_type(self) -> Optional[str]:
        return pulumi.get(self, "comparison_type")

    @property
    @pulumi.getter
    def matcher(self) -> Optional[str]:
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2Test(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startUrl":
            suggest = "start_url"
        elif key == "urlProtocol":
            suggest = "url_protocol"
        elif key == "advancedSettings":
            suggest = "advanced_settings"
        elif key == "deviceId":
            suggest = "device_id"
        elif key == "locationIds":
            suggest = "location_ids"
        elif key == "schedulingStrategy":
            suggest = "scheduling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckV2Test. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckV2Test.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckV2Test.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 start_url: str,
                 transactions: Sequence['outputs.SyntheticsCreateBrowserCheckV2TestTransaction'],
                 url_protocol: str,
                 active: Optional[bool] = None,
                 advanced_settings: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSetting']] = None,
                 device_id: Optional[int] = None,
                 frequency: Optional[int] = None,
                 location_ids: Optional[Sequence[str]] = None,
                 scheduling_strategy: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_url", start_url)
        pulumi.set(__self__, "transactions", transactions)
        pulumi.set(__self__, "url_protocol", url_protocol)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if advanced_settings is not None:
            pulumi.set(__self__, "advanced_settings", advanced_settings)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startUrl")
    def start_url(self) -> str:
        return pulumi.get(self, "start_url")

    @property
    @pulumi.getter
    def transactions(self) -> Sequence['outputs.SyntheticsCreateBrowserCheckV2TestTransaction']:
        return pulumi.get(self, "transactions")

    @property
    @pulumi.getter(name="urlProtocol")
    def url_protocol(self) -> str:
        return pulumi.get(self, "url_protocol")

    @property
    @pulumi.getter
    def active(self) -> Optional[bool]:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="advancedSettings")
    def advanced_settings(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSetting']]:
        return pulumi.get(self, "advanced_settings")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[int]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def frequency(self) -> Optional[int]:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[str]:
        return pulumi.get(self, "scheduling_strategy")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostOverrides":
            suggest = "host_overrides"
        elif key == "userAgent":
            suggest = "user_agent"
        elif key == "verifyCertificates":
            suggest = "verify_certificates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckV2TestAdvancedSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckV2TestAdvancedSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckV2TestAdvancedSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentications: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthentication']] = None,
                 cookies: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookie']] = None,
                 headers: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeader']] = None,
                 host_overrides: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride']] = None,
                 user_agent: Optional[str] = None,
                 verify_certificates: Optional[bool] = None):
        if authentications is not None:
            pulumi.set(__self__, "authentications", authentications)
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if host_overrides is not None:
            pulumi.set(__self__, "host_overrides", host_overrides)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if verify_certificates is not None:
            pulumi.set(__self__, "verify_certificates", verify_certificates)

    @property
    @pulumi.getter
    def authentications(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthentication']]:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookie']]:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="hostOverrides")
    def host_overrides(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride']]:
        return pulumi.get(self, "host_overrides")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[str]:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="verifyCertificates")
    def verify_certificates(self) -> Optional[bool]:
        return pulumi.get(self, "verify_certificates")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthentication(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookie(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 key: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeader(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepHostHeader":
            suggest = "keep_host_header"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_host_header: Optional[bool] = None,
                 source: Optional[str] = None,
                 target: Optional[str] = None):
        if keep_host_header is not None:
            pulumi.set(__self__, "keep_host_header", keep_host_header)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="keepHostHeader")
    def keep_host_header(self) -> Optional[bool]:
        return pulumi.get(self, "keep_host_header")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestTransaction(dict):
    def __init__(__self__, *,
                 steps: Sequence['outputs.SyntheticsCreateBrowserCheckV2TestTransactionStep'],
                 name: Optional[str] = None):
        pulumi.set(__self__, "steps", steps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.SyntheticsCreateBrowserCheckV2TestTransactionStep']:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestTransactionStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitForNav":
            suggest = "wait_for_nav"
        elif key == "optionSelector":
            suggest = "option_selector"
        elif key == "optionSelectorType":
            suggest = "option_selector_type"
        elif key == "selectorType":
            suggest = "selector_type"
        elif key == "variableName":
            suggest = "variable_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateBrowserCheckV2TestTransactionStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateBrowserCheckV2TestTransactionStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateBrowserCheckV2TestTransactionStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wait_for_nav: bool,
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 option_selector: Optional[str] = None,
                 option_selector_type: Optional[str] = None,
                 options: Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestTransactionStepOption']] = None,
                 selector: Optional[str] = None,
                 selector_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None):
        pulumi.set(__self__, "wait_for_nav", wait_for_nav)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option_selector is not None:
            pulumi.set(__self__, "option_selector", option_selector)
        if option_selector_type is not None:
            pulumi.set(__self__, "option_selector_type", option_selector_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter(name="waitForNav")
    def wait_for_nav(self) -> bool:
        return pulumi.get(self, "wait_for_nav")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optionSelector")
    def option_selector(self) -> Optional[str]:
        return pulumi.get(self, "option_selector")

    @property
    @pulumi.getter(name="optionSelectorType")
    def option_selector_type(self) -> Optional[str]:
        return pulumi.get(self, "option_selector_type")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.SyntheticsCreateBrowserCheckV2TestTransactionStepOption']]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")


@pulumi.output_type
class SyntheticsCreateBrowserCheckV2TestTransactionStepOption(dict):
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsCreateBrowserCheckViewport(dict):
    def __init__(__self__, *,
                 height: Optional[int] = None,
                 width: Optional[int] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class SyntheticsCreateHttpCheckBlackoutPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "durationInMinutes":
            suggest = "duration_in_minutes"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "isRepeat":
            suggest = "is_repeat"
        elif key == "monthlyRepeatType":
            suggest = "monthly_repeat_type"
        elif key == "repeatType":
            suggest = "repeat_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckBlackoutPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckBlackoutPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckBlackoutPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 duration_in_minutes: Optional[int] = None,
                 end_date: Optional[str] = None,
                 end_time: Optional[str] = None,
                 is_repeat: Optional[bool] = None,
                 monthly_repeat_type: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_time: Optional[str] = None,
                 timezone: Optional[str] = None,
                 updated_at: Optional[str] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if monthly_repeat_type is not None:
            pulumi.set(__self__, "monthly_repeat_type", monthly_repeat_type)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[bool]:
        return pulumi.get(self, "is_repeat")

    @property
    @pulumi.getter(name="monthlyRepeatType")
    def monthly_repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "monthly_repeat_type")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsCreateHttpCheckCheckConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "downloadBandwidth":
            suggest = "download_bandwidth"
        elif key == "packetLoss":
            suggest = "packet_loss"
        elif key == "uploadBandwidth":
            suggest = "upload_bandwidth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckCheckConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckCheckConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckCheckConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 download_bandwidth: Optional[int] = None,
                 latency: Optional[int] = None,
                 packet_loss: Optional[float] = None,
                 upload_bandwidth: Optional[int] = None):
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "download_bandwidth")

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[float]:
        return pulumi.get(self, "packet_loss")

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")


@pulumi.output_type
class SyntheticsCreateHttpCheckHttpRequestHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAgent":
            suggest = "user_agent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckHttpRequestHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckHttpRequestHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckHttpRequestHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_agent: Optional[str] = None):
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[str]:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationWindows":
            suggest = "notification_windows"
        elif key == "notifyAfterFailureCount":
            suggest = "notify_after_failure_count"
        elif key == "notifyOnLocationFailure":
            suggest = "notify_on_location_failure"
        elif key == "notifyWhos":
            suggest = "notify_whos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call: Optional[bool] = None,
                 email: Optional[bool] = None,
                 escalations: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalation']] = None,
                 muted: Optional[bool] = None,
                 notification_windows: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationNotificationWindow']] = None,
                 notify_after_failure_count: Optional[int] = None,
                 notify_on_location_failure: Optional[bool] = None,
                 notify_whos: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationNotifyWho']] = None,
                 sms: Optional[bool] = None):
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if escalations is not None:
            pulumi.set(__self__, "escalations", escalations)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_after_failure_count is not None:
            pulumi.set(__self__, "notify_after_failure_count", notify_after_failure_count)
        if notify_on_location_failure is not None:
            pulumi.set(__self__, "notify_on_location_failure", notify_on_location_failure)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def escalations(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalation']]:
        return pulumi.get(self, "escalations")

    @property
    @pulumi.getter
    def muted(self) -> Optional[bool]:
        return pulumi.get(self, "muted")

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationNotificationWindow']]:
        return pulumi.get(self, "notification_windows")

    @property
    @pulumi.getter(name="notifyAfterFailureCount")
    def notify_after_failure_count(self) -> Optional[int]:
        return pulumi.get(self, "notify_after_failure_count")

    @property
    @pulumi.getter(name="notifyOnLocationFailure")
    def notify_on_location_failure(self) -> Optional[bool]:
        return pulumi.get(self, "notify_on_location_failure")

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationNotifyWho']]:
        return pulumi.get(self, "notify_whos")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationEscalation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterMinutes":
            suggest = "after_minutes"
        elif key == "isRepeat":
            suggest = "is_repeat"
        elif key == "notificationWindows":
            suggest = "notification_windows"
        elif key == "notifyWhos":
            suggest = "notify_whos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationEscalation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_minutes: Optional[int] = None,
                 call: Optional[bool] = None,
                 email: Optional[bool] = None,
                 is_repeat: Optional[bool] = None,
                 notification_windows: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow']] = None,
                 notify_whos: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalationNotifyWho']] = None,
                 sms: Optional[bool] = None):
        if after_minutes is not None:
            pulumi.set(__self__, "after_minutes", after_minutes)
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter(name="afterMinutes")
    def after_minutes(self) -> Optional[int]:
        return pulumi.get(self, "after_minutes")

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[bool]:
        return pulumi.get(self, "is_repeat")

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow']]:
        return pulumi.get(self, "notification_windows")

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalationNotifyWho']]:
        return pulumi.get(self, "notify_whos")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalationNotificationWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationEscalationNotifyWho(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customUserEmail":
            suggest = "custom_user_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationEscalationNotifyWho. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalationNotifyWho.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalationNotifyWho.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call: Optional[bool] = None,
                 custom_user_email: Optional[str] = None,
                 email: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink']] = None,
                 sms: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[str]:
        return pulumi.get(self, "custom_user_email")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfHtml":
            suggest = "self_html"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 self_html: Optional[str] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[str]:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationNotificationWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMinutes":
            suggest = "duration_in_minutes"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationNotificationWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationNotificationWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationNotificationWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration_in_minutes: Optional[int] = None,
                 end_time: Optional[str] = None,
                 start_time: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationNotifyWho(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customUserEmail":
            suggest = "custom_user_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationNotifyWho. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationNotifyWho.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationNotifyWho.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 call: Optional[bool] = None,
                 custom_user_email: Optional[str] = None,
                 email: Optional[bool] = None,
                 id: Optional[int] = None,
                 links: Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationNotifyWhoLink']] = None,
                 sms: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[str]:
        return pulumi.get(self, "custom_user_email")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckNotificationNotifyWhoLink']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateHttpCheckNotificationNotifyWhoLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selfHtml":
            suggest = "self_html"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckNotificationNotifyWhoLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckNotificationNotifyWhoLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckNotificationNotifyWhoLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 self_html: Optional[str] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[str]:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCreateHttpCheckSuccessCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "comparisonString":
            suggest = "comparison_string"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckSuccessCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckSuccessCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckSuccessCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 comparison_string: Optional[str] = None,
                 created_at: Optional[str] = None,
                 updated_at: Optional[str] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if comparison_string is not None:
            pulumi.set(__self__, "comparison_string", comparison_string)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="comparisonString")
    def comparison_string(self) -> Optional[str]:
        return pulumi.get(self, "comparison_string")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsCreateHttpCheckV2Test(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationIds":
            suggest = "location_ids"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "schedulingStrategy":
            suggest = "scheduling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreateHttpCheckV2Test. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreateHttpCheckV2Test.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreateHttpCheckV2Test.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 frequency: int,
                 location_ids: Sequence[str],
                 name: str,
                 request_method: str,
                 url: str,
                 body: Optional[str] = None,
                 headers: Optional[Sequence['outputs.SyntheticsCreateHttpCheckV2TestHeader']] = None,
                 scheduling_strategy: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Sequence[str]:
        return pulumi.get(self, "location_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.SyntheticsCreateHttpCheckV2TestHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[str]:
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreateHttpCheckV2TestHeader(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCreateLocationV2Location(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 country: Optional[str] = None,
                 default: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCreatePortCheckV2Test(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationIds":
            suggest = "location_ids"
        elif key == "schedulingStrategy":
            suggest = "scheduling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyntheticsCreatePortCheckV2Test. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyntheticsCreatePortCheckV2Test.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyntheticsCreatePortCheckV2Test.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 active: bool,
                 frequency: int,
                 host: str,
                 location_ids: Sequence[str],
                 name: str,
                 port: int,
                 protocol: str,
                 scheduling_strategy: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Sequence[str]:
        return pulumi.get(self, "location_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[str]:
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsCreateVariableV2Variable(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 secret: bool,
                 value: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> bool:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsApiV2CheckTestResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 created_at: str,
                 devices: Sequence['outputs.SyntheticsApiV2CheckTestDeviceResult'],
                 frequency: int,
                 id: int,
                 name: str,
                 requests: Sequence['outputs.SyntheticsApiV2CheckTestRequestResult'],
                 scheduling_strategy: str,
                 type: str,
                 updated_at: str,
                 location_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "requests", requests)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.SyntheticsApiV2CheckTestDeviceResult']:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def requests(self) -> Sequence['outputs.SyntheticsApiV2CheckTestRequestResult']:
        return pulumi.get(self, "requests")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")


@pulumi.output_type
class SyntheticsApiV2CheckTestDeviceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 network_connections: Sequence['outputs.SyntheticsApiV2CheckTestDeviceNetworkConnectionResult'],
                 user_agent: str,
                 viewport_height: Optional[int] = None,
                 viewport_width: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_connections", network_connections)
        pulumi.set(__self__, "user_agent", user_agent)
        if viewport_height is not None:
            pulumi.set(__self__, "viewport_height", viewport_height)
        if viewport_width is not None:
            pulumi.set(__self__, "viewport_width", viewport_width)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="networkConnections")
    def network_connections(self) -> Sequence['outputs.SyntheticsApiV2CheckTestDeviceNetworkConnectionResult']:
        return pulumi.get(self, "network_connections")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="viewportHeight")
    def viewport_height(self) -> Optional[int]:
        return pulumi.get(self, "viewport_height")

    @property
    @pulumi.getter(name="viewportWidth")
    def viewport_width(self) -> Optional[int]:
        return pulumi.get(self, "viewport_width")


@pulumi.output_type
class SyntheticsApiV2CheckTestDeviceNetworkConnectionResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 download_bandwidth: Optional[int] = None,
                 latency: Optional[int] = None,
                 packet_loss: Optional[int] = None,
                 upload_bandwidth: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "download_bandwidth")

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss")

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")


@pulumi.output_type
class SyntheticsApiV2CheckTestRequestResult(dict):
    def __init__(__self__, *,
                 setups: Sequence['outputs.SyntheticsApiV2CheckTestRequestSetupResult'],
                 validations: Sequence['outputs.SyntheticsApiV2CheckTestRequestValidationResult'],
                 configurations: Optional[Sequence['outputs.SyntheticsApiV2CheckTestRequestConfigurationResult']] = None):
        pulumi.set(__self__, "setups", setups)
        pulumi.set(__self__, "validations", validations)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def setups(self) -> Sequence['outputs.SyntheticsApiV2CheckTestRequestSetupResult']:
        return pulumi.get(self, "setups")

    @property
    @pulumi.getter
    def validations(self) -> Sequence['outputs.SyntheticsApiV2CheckTestRequestValidationResult']:
        return pulumi.get(self, "validations")

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['outputs.SyntheticsApiV2CheckTestRequestConfigurationResult']]:
        return pulumi.get(self, "configurations")


@pulumi.output_type
class SyntheticsApiV2CheckTestRequestConfigurationResult(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 headers: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 request_method: Optional[str] = None,
                 url: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsApiV2CheckTestRequestSetupResult(dict):
    def __init__(__self__, *,
                 extractor: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None,
                 variable: Optional[str] = None):
        if extractor is not None:
            pulumi.set(__self__, "extractor", extractor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def extractor(self) -> Optional[str]:
        return pulumi.get(self, "extractor")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")


@pulumi.output_type
class SyntheticsApiV2CheckTestRequestValidationResult(dict):
    def __init__(__self__, *,
                 actual: Optional[str] = None,
                 comparator: Optional[str] = None,
                 expected: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if actual is not None:
            pulumi.set(__self__, "actual", actual)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actual(self) -> Optional[str]:
        return pulumi.get(self, "actual")

    @property
    @pulumi.getter
    def comparator(self) -> Optional[str]:
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter
    def expected(self) -> Optional[str]:
        return pulumi.get(self, "expected")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 advanced_settings: Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingResult'],
                 business_transactions: Sequence['outputs.SyntheticsBrowserV2CheckTestBusinessTransactionResult'],
                 created_at: str,
                 devices: Sequence['outputs.SyntheticsBrowserV2CheckTestDeviceResult'],
                 frequency: int,
                 id: int,
                 location_ids: Sequence[str],
                 name: str,
                 scheduling_strategy: str,
                 transactions: Sequence['outputs.SyntheticsBrowserV2CheckTestTransactionResult'],
                 type: str,
                 updated_at: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "advanced_settings", advanced_settings)
        pulumi.set(__self__, "business_transactions", business_transactions)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "transactions", transactions)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="advancedSettings")
    def advanced_settings(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingResult']:
        return pulumi.get(self, "advanced_settings")

    @property
    @pulumi.getter(name="businessTransactions")
    def business_transactions(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestBusinessTransactionResult']:
        return pulumi.get(self, "business_transactions")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestDeviceResult']:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Sequence[str]:
        return pulumi.get(self, "location_ids")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def transactions(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestTransactionResult']:
        return pulumi.get(self, "transactions")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestAdvancedSettingResult(dict):
    def __init__(__self__, *,
                 authentications: Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationResult'],
                 cookies: Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingCookieResult'],
                 headers: Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingHeaderResult'],
                 host_overrides: Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideResult'],
                 user_agent: str,
                 verify_certificates: bool):
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "cookies", cookies)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "host_overrides", host_overrides)
        pulumi.set(__self__, "user_agent", user_agent)
        pulumi.set(__self__, "verify_certificates", verify_certificates)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationResult']:
        return pulumi.get(self, "authentications")

    @property
    @pulumi.getter
    def cookies(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingCookieResult']:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="hostOverrides")
    def host_overrides(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideResult']:
        return pulumi.get(self, "host_overrides")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="verifyCertificates")
    def verify_certificates(self) -> bool:
        return pulumi.get(self, "verify_certificates")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestAdvancedSettingCookieResult(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 key: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestAdvancedSettingHeaderResult(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideResult(dict):
    def __init__(__self__, *,
                 keep_host_header: Optional[bool] = None,
                 source: Optional[str] = None,
                 target: Optional[str] = None):
        if keep_host_header is not None:
            pulumi.set(__self__, "keep_host_header", keep_host_header)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="keepHostHeader")
    def keep_host_header(self) -> Optional[bool]:
        return pulumi.get(self, "keep_host_header")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestBusinessTransactionResult(dict):
    def __init__(__self__, *,
                 steps: Sequence['outputs.SyntheticsBrowserV2CheckTestBusinessTransactionStepResult'],
                 name: Optional[str] = None):
        pulumi.set(__self__, "steps", steps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestBusinessTransactionStepResult']:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestBusinessTransactionStepResult(dict):
    def __init__(__self__, *,
                 options: Sequence['outputs.SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionResult'],
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 option_selector: Optional[str] = None,
                 option_selector_type: Optional[str] = None,
                 selector: Optional[str] = None,
                 selector_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 wait_for_nav: Optional[bool] = None):
        pulumi.set(__self__, "options", options)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option_selector is not None:
            pulumi.set(__self__, "option_selector", option_selector)
        if option_selector_type is not None:
            pulumi.set(__self__, "option_selector_type", option_selector_type)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if wait_for_nav is not None:
            pulumi.set(__self__, "wait_for_nav", wait_for_nav)

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optionSelector")
    def option_selector(self) -> Optional[str]:
        return pulumi.get(self, "option_selector")

    @property
    @pulumi.getter(name="optionSelectorType")
    def option_selector_type(self) -> Optional[str]:
        return pulumi.get(self, "option_selector_type")

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="waitForNav")
    def wait_for_nav(self) -> Optional[bool]:
        return pulumi.get(self, "wait_for_nav")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionResult(dict):
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestDeviceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 network_connections: Sequence['outputs.SyntheticsBrowserV2CheckTestDeviceNetworkConnectionResult'],
                 user_agent: str,
                 viewport_height: Optional[int] = None,
                 viewport_width: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_connections", network_connections)
        pulumi.set(__self__, "user_agent", user_agent)
        if viewport_height is not None:
            pulumi.set(__self__, "viewport_height", viewport_height)
        if viewport_width is not None:
            pulumi.set(__self__, "viewport_width", viewport_width)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="networkConnections")
    def network_connections(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestDeviceNetworkConnectionResult']:
        return pulumi.get(self, "network_connections")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="viewportHeight")
    def viewport_height(self) -> Optional[int]:
        return pulumi.get(self, "viewport_height")

    @property
    @pulumi.getter(name="viewportWidth")
    def viewport_width(self) -> Optional[int]:
        return pulumi.get(self, "viewport_width")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestDeviceNetworkConnectionResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 download_bandwidth: Optional[int] = None,
                 latency: Optional[int] = None,
                 packet_loss: Optional[int] = None,
                 upload_bandwidth: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "download_bandwidth")

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss")

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestTransactionResult(dict):
    def __init__(__self__, *,
                 steps: Sequence['outputs.SyntheticsBrowserV2CheckTestTransactionStepResult'],
                 name: Optional[str] = None):
        pulumi.set(__self__, "steps", steps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestTransactionStepResult']:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestTransactionStepResult(dict):
    def __init__(__self__, *,
                 options: Sequence['outputs.SyntheticsBrowserV2CheckTestTransactionStepOptionResult'],
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 option_selector: Optional[str] = None,
                 option_selector_type: Optional[str] = None,
                 selector: Optional[str] = None,
                 selector_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 wait_for_nav: Optional[bool] = None):
        pulumi.set(__self__, "options", options)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option_selector is not None:
            pulumi.set(__self__, "option_selector", option_selector)
        if option_selector_type is not None:
            pulumi.set(__self__, "option_selector_type", option_selector_type)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if wait_for_nav is not None:
            pulumi.set(__self__, "wait_for_nav", wait_for_nav)

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.SyntheticsBrowserV2CheckTestTransactionStepOptionResult']:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="optionSelector")
    def option_selector(self) -> Optional[str]:
        return pulumi.get(self, "option_selector")

    @property
    @pulumi.getter(name="optionSelectorType")
    def option_selector_type(self) -> Optional[str]:
        return pulumi.get(self, "option_selector_type")

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter(name="waitForNav")
    def wait_for_nav(self) -> Optional[bool]:
        return pulumi.get(self, "wait_for_nav")


@pulumi.output_type
class SyntheticsBrowserV2CheckTestTransactionStepOptionResult(dict):
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SyntheticsCheckBlackoutPeriodResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 duration_in_minutes: int,
                 end_date: str,
                 end_time: str,
                 is_repeat: bool,
                 monthly_repeat_type: str,
                 repeat_type: str,
                 start_date: str,
                 start_time: str,
                 timezone: str,
                 updated_at: str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "is_repeat", is_repeat)
        pulumi.set(__self__, "monthly_repeat_type", monthly_repeat_type)
        pulumi.set(__self__, "repeat_type", repeat_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> int:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> bool:
        return pulumi.get(self, "is_repeat")

    @property
    @pulumi.getter(name="monthlyRepeatType")
    def monthly_repeat_type(self) -> str:
        return pulumi.get(self, "monthly_repeat_type")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> str:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsCheckBrowserResult(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCheckCheckConnectionResult(dict):
    def __init__(__self__, *,
                 download_bandwidth: int,
                 latency: int,
                 packet_loss: int,
                 upload_bandwidth: int):
        pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "packet_loss", packet_loss)
        pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> int:
        return pulumi.get(self, "download_bandwidth")

    @property
    @pulumi.getter
    def latency(self) -> int:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> int:
        return pulumi.get(self, "packet_loss")

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> int:
        return pulumi.get(self, "upload_bandwidth")


@pulumi.output_type
class SyntheticsCheckCookieResult(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 key: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCheckDnsOverrideResult(dict):
    def __init__(__self__, *,
                 original_domain: Optional[str] = None,
                 original_host: Optional[str] = None):
        if original_domain is not None:
            pulumi.set(__self__, "original_domain", original_domain)
        if original_host is not None:
            pulumi.set(__self__, "original_host", original_host)

    @property
    @pulumi.getter(name="originalDomain")
    def original_domain(self) -> Optional[str]:
        return pulumi.get(self, "original_domain")

    @property
    @pulumi.getter(name="originalHost")
    def original_host(self) -> Optional[str]:
        return pulumi.get(self, "original_host")


@pulumi.output_type
class SyntheticsCheckExcludedFileResult(dict):
    def __init__(__self__, *,
                 exclusion_type: Optional[str] = None,
                 pattern: Optional[str] = None,
                 preset_name: Optional[str] = None):
        if exclusion_type is not None:
            pulumi.set(__self__, "exclusion_type", exclusion_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if preset_name is not None:
            pulumi.set(__self__, "preset_name", preset_name)

    @property
    @pulumi.getter(name="exclusionType")
    def exclusion_type(self) -> Optional[str]:
        return pulumi.get(self, "exclusion_type")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter(name="presetName")
    def preset_name(self) -> Optional[str]:
        return pulumi.get(self, "preset_name")


@pulumi.output_type
class SyntheticsCheckHttpRequestHeaderResult(dict):
    def __init__(__self__, *,
                 user_agent: str):
        pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")


@pulumi.output_type
class SyntheticsCheckIntegrationResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsCheckJavascriptFileResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsCheckLinkResult(dict):
    def __init__(__self__, *,
                 last_run: str,
                 metrics: str,
                 self: str,
                 self_html: str):
        pulumi.set(__self__, "last_run", last_run)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "self", self)
        pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="lastRun")
    def last_run(self) -> str:
        return pulumi.get(self, "last_run")

    @property
    @pulumi.getter
    def metrics(self) -> str:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def self(self) -> str:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> str:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCheckLocationResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 region_code: str,
                 world_region: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region_code", region_code)
        pulumi.set(__self__, "world_region", world_region)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter(name="worldRegion")
    def world_region(self) -> str:
        return pulumi.get(self, "world_region")


@pulumi.output_type
class SyntheticsCheckNotificationResult(dict):
    def __init__(__self__, *,
                 call: bool,
                 email: bool,
                 escalations: Sequence['outputs.SyntheticsCheckNotificationEscalationResult'],
                 muted: bool,
                 notification_windows: Sequence['outputs.SyntheticsCheckNotificationNotificationWindowResult'],
                 notify_after_failure_count: int,
                 notify_on_location_failure: bool,
                 notify_whos: Sequence['outputs.SyntheticsCheckNotificationNotifyWhoResult'],
                 sms: bool):
        pulumi.set(__self__, "call", call)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "escalations", escalations)
        pulumi.set(__self__, "muted", muted)
        pulumi.set(__self__, "notification_windows", notification_windows)
        pulumi.set(__self__, "notify_after_failure_count", notify_after_failure_count)
        pulumi.set(__self__, "notify_on_location_failure", notify_on_location_failure)
        pulumi.set(__self__, "notify_whos", notify_whos)
        pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter
    def call(self) -> bool:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter
    def email(self) -> bool:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def escalations(self) -> Sequence['outputs.SyntheticsCheckNotificationEscalationResult']:
        return pulumi.get(self, "escalations")

    @property
    @pulumi.getter
    def muted(self) -> bool:
        return pulumi.get(self, "muted")

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Sequence['outputs.SyntheticsCheckNotificationNotificationWindowResult']:
        return pulumi.get(self, "notification_windows")

    @property
    @pulumi.getter(name="notifyAfterFailureCount")
    def notify_after_failure_count(self) -> int:
        return pulumi.get(self, "notify_after_failure_count")

    @property
    @pulumi.getter(name="notifyOnLocationFailure")
    def notify_on_location_failure(self) -> bool:
        return pulumi.get(self, "notify_on_location_failure")

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Sequence['outputs.SyntheticsCheckNotificationNotifyWhoResult']:
        return pulumi.get(self, "notify_whos")

    @property
    @pulumi.getter
    def sms(self) -> bool:
        return pulumi.get(self, "sms")


@pulumi.output_type
class SyntheticsCheckNotificationEscalationResult(dict):
    def __init__(__self__, *,
                 after_minutes: int,
                 call: bool,
                 email: bool,
                 is_repeat: bool,
                 notification_windows: Sequence['outputs.SyntheticsCheckNotificationEscalationNotificationWindowResult'],
                 notify_whos: Sequence['outputs.SyntheticsCheckNotificationEscalationNotifyWhoResult'],
                 sms: bool):
        pulumi.set(__self__, "after_minutes", after_minutes)
        pulumi.set(__self__, "call", call)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "is_repeat", is_repeat)
        pulumi.set(__self__, "notification_windows", notification_windows)
        pulumi.set(__self__, "notify_whos", notify_whos)
        pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter(name="afterMinutes")
    def after_minutes(self) -> int:
        return pulumi.get(self, "after_minutes")

    @property
    @pulumi.getter
    def call(self) -> bool:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter
    def email(self) -> bool:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> bool:
        return pulumi.get(self, "is_repeat")

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Sequence['outputs.SyntheticsCheckNotificationEscalationNotificationWindowResult']:
        return pulumi.get(self, "notification_windows")

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Sequence['outputs.SyntheticsCheckNotificationEscalationNotifyWhoResult']:
        return pulumi.get(self, "notify_whos")

    @property
    @pulumi.getter
    def sms(self) -> bool:
        return pulumi.get(self, "sms")


@pulumi.output_type
class SyntheticsCheckNotificationEscalationNotificationWindowResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: int,
                 end_time: str,
                 start_time: str,
                 time_zone: str):
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> int:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SyntheticsCheckNotificationEscalationNotifyWhoResult(dict):
    def __init__(__self__, *,
                 links: Sequence['outputs.SyntheticsCheckNotificationEscalationNotifyWhoLinkResult'],
                 custom_user_email: Optional[str] = None,
                 id: Optional[int] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "links", links)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.SyntheticsCheckNotificationEscalationNotifyWhoLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[str]:
        return pulumi.get(self, "custom_user_email")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCheckNotificationEscalationNotifyWhoLinkResult(dict):
    def __init__(__self__, *,
                 self_html: str):
        pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> str:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCheckNotificationNotificationWindowResult(dict):
    def __init__(__self__, *,
                 duration_in_minutes: int,
                 end_time: str,
                 start_time: str,
                 time_zone: str):
        pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> int:
        return pulumi.get(self, "duration_in_minutes")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class SyntheticsCheckNotificationNotifyWhoResult(dict):
    def __init__(__self__, *,
                 id: int,
                 links: Sequence['outputs.SyntheticsCheckNotificationNotifyWhoLinkResult'],
                 call: Optional[bool] = None,
                 custom_user_email: Optional[str] = None,
                 email: Optional[bool] = None,
                 sms: Optional[bool] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "links", links)
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.SyntheticsCheckNotificationNotifyWhoLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def call(self) -> Optional[bool]:
        return pulumi.get(self, "call")

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[str]:
        return pulumi.get(self, "custom_user_email")

    @property
    @pulumi.getter
    def email(self) -> Optional[bool]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def sms(self) -> Optional[bool]:
        return pulumi.get(self, "sms")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsCheckNotificationNotifyWhoLinkResult(dict):
    def __init__(__self__, *,
                 self_html: str):
        pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> str:
        return pulumi.get(self, "self_html")


@pulumi.output_type
class SyntheticsCheckStatusResult(dict):
    def __init__(__self__, *,
                 has_failure: bool,
                 has_location_failure: bool,
                 last_alert_at: str,
                 last_code: int,
                 last_failure_at: str,
                 last_message: str,
                 last_response_time: int,
                 last_run_at: str):
        pulumi.set(__self__, "has_failure", has_failure)
        pulumi.set(__self__, "has_location_failure", has_location_failure)
        pulumi.set(__self__, "last_alert_at", last_alert_at)
        pulumi.set(__self__, "last_code", last_code)
        pulumi.set(__self__, "last_failure_at", last_failure_at)
        pulumi.set(__self__, "last_message", last_message)
        pulumi.set(__self__, "last_response_time", last_response_time)
        pulumi.set(__self__, "last_run_at", last_run_at)

    @property
    @pulumi.getter(name="hasFailure")
    def has_failure(self) -> bool:
        return pulumi.get(self, "has_failure")

    @property
    @pulumi.getter(name="hasLocationFailure")
    def has_location_failure(self) -> bool:
        return pulumi.get(self, "has_location_failure")

    @property
    @pulumi.getter(name="lastAlertAt")
    def last_alert_at(self) -> str:
        return pulumi.get(self, "last_alert_at")

    @property
    @pulumi.getter(name="lastCode")
    def last_code(self) -> int:
        return pulumi.get(self, "last_code")

    @property
    @pulumi.getter(name="lastFailureAt")
    def last_failure_at(self) -> str:
        return pulumi.get(self, "last_failure_at")

    @property
    @pulumi.getter(name="lastMessage")
    def last_message(self) -> str:
        return pulumi.get(self, "last_message")

    @property
    @pulumi.getter(name="lastResponseTime")
    def last_response_time(self) -> int:
        return pulumi.get(self, "last_response_time")

    @property
    @pulumi.getter(name="lastRunAt")
    def last_run_at(self) -> str:
        return pulumi.get(self, "last_run_at")


@pulumi.output_type
class SyntheticsCheckStepResult(dict):
    def __init__(__self__, *,
                 how: Optional[str] = None,
                 item_method: Optional[str] = None,
                 name: Optional[str] = None,
                 position: Optional[int] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 what: Optional[str] = None):
        if how is not None:
            pulumi.set(__self__, "how", how)
        if item_method is not None:
            pulumi.set(__self__, "item_method", item_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if what is not None:
            pulumi.set(__self__, "what", what)

    @property
    @pulumi.getter
    def how(self) -> Optional[str]:
        return pulumi.get(self, "how")

    @property
    @pulumi.getter(name="itemMethod")
    def item_method(self) -> Optional[str]:
        return pulumi.get(self, "item_method")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> Optional[int]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter
    def what(self) -> Optional[str]:
        return pulumi.get(self, "what")


@pulumi.output_type
class SyntheticsCheckSuccessCriteriaResult(dict):
    def __init__(__self__, *,
                 action_type: str,
                 comparison_string: str,
                 created_at: str,
                 updated_at: str):
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "comparison_string", comparison_string)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> str:
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter(name="comparisonString")
    def comparison_string(self) -> str:
        return pulumi.get(self, "comparison_string")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class SyntheticsCheckTagResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class SyntheticsCheckThresholdMonitorResult(dict):
    def __init__(__self__, *,
                 comparison_type: Optional[str] = None,
                 matcher: Optional[str] = None,
                 metric_name: Optional[str] = None,
                 value: Optional[int] = None):
        if comparison_type is not None:
            pulumi.set(__self__, "comparison_type", comparison_type)
        if matcher is not None:
            pulumi.set(__self__, "matcher", matcher)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="comparisonType")
    def comparison_type(self) -> Optional[str]:
        return pulumi.get(self, "comparison_type")

    @property
    @pulumi.getter
    def matcher(self) -> Optional[str]:
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsCheckViewportResult(dict):
    def __init__(__self__, *,
                 height: Optional[int] = None,
                 width: Optional[int] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class SyntheticsDevicesV2CheckDeviceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 network_connections: Sequence['outputs.SyntheticsDevicesV2CheckDeviceNetworkConnectionResult'],
                 user_agent: str,
                 viewport_height: int,
                 viewport_width: int):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_connections", network_connections)
        pulumi.set(__self__, "user_agent", user_agent)
        pulumi.set(__self__, "viewport_height", viewport_height)
        pulumi.set(__self__, "viewport_width", viewport_width)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter(name="networkConnections")
    def network_connections(self) -> Sequence['outputs.SyntheticsDevicesV2CheckDeviceNetworkConnectionResult']:
        return pulumi.get(self, "network_connections")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @property
    @pulumi.getter(name="viewportHeight")
    def viewport_height(self) -> int:
        return pulumi.get(self, "viewport_height")

    @property
    @pulumi.getter(name="viewportWidth")
    def viewport_width(self) -> int:
        return pulumi.get(self, "viewport_width")


@pulumi.output_type
class SyntheticsDevicesV2CheckDeviceNetworkConnectionResult(dict):
    def __init__(__self__, *,
                 description: str,
                 download_bandwidth: int,
                 latency: int,
                 packet_loss: int,
                 upload_bandwidth: Optional[int] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> int:
        return pulumi.get(self, "download_bandwidth")

    @property
    @pulumi.getter
    def latency(self) -> int:
        return pulumi.get(self, "latency")

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> int:
        return pulumi.get(self, "packet_loss")

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")


@pulumi.output_type
class SyntheticsHttpV2CheckTestResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 body: str,
                 created_at: str,
                 frequency: int,
                 headers: Sequence['outputs.SyntheticsHttpV2CheckTestHeaderResult'],
                 id: int,
                 name: str,
                 request_method: str,
                 scheduling_strategy: str,
                 type: str,
                 updated_at: str,
                 url: str,
                 location_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url", url)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.SyntheticsHttpV2CheckTestHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")


@pulumi.output_type
class SyntheticsHttpV2CheckTestHeaderResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsLocationV2CheckLocationResult(dict):
    def __init__(__self__, *,
                 country: str,
                 default: bool,
                 id: str,
                 label: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsLocationV2CheckMetaResult(dict):
    def __init__(__self__, *,
                 active_test_ids: Sequence[int],
                 paused_test_ids: Sequence[int]):
        pulumi.set(__self__, "active_test_ids", active_test_ids)
        pulumi.set(__self__, "paused_test_ids", paused_test_ids)

    @property
    @pulumi.getter(name="activeTestIds")
    def active_test_ids(self) -> Sequence[int]:
        return pulumi.get(self, "active_test_ids")

    @property
    @pulumi.getter(name="pausedTestIds")
    def paused_test_ids(self) -> Sequence[int]:
        return pulumi.get(self, "paused_test_ids")


@pulumi.output_type
class SyntheticsLocationsV2CheckLocationResult(dict):
    def __init__(__self__, *,
                 country: str,
                 default: bool,
                 id: str,
                 label: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SyntheticsPortV2CheckTestResult(dict):
    def __init__(__self__, *,
                 active: bool,
                 created_at: str,
                 frequency: int,
                 host: str,
                 id: int,
                 name: str,
                 port: int,
                 protocol: str,
                 scheduling_strategy: str,
                 type: str,
                 updated_at: str,
                 location_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")


@pulumi.output_type
class SyntheticsVariableV2CheckVariableResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 id: int,
                 name: str,
                 secret: bool,
                 updated_at: str,
                 value: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> bool:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class SyntheticsVariablesV2CheckVariableResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 id: int,
                 name: str,
                 secret: bool,
                 updated_at: str,
                 value: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> bool:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


