# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'SyntheticsCreateApiCheckV2TestArgs',
    'SyntheticsCreateApiCheckV2TestRequestArgs',
    'SyntheticsCreateApiCheckV2TestRequestConfigurationArgs',
    'SyntheticsCreateApiCheckV2TestRequestSetupArgs',
    'SyntheticsCreateApiCheckV2TestRequestValidationArgs',
    'SyntheticsCreateBrowserCheckBlackoutPeriodArgs',
    'SyntheticsCreateBrowserCheckBrowserArgs',
    'SyntheticsCreateBrowserCheckCheckConnectionArgs',
    'SyntheticsCreateBrowserCheckCookieArgs',
    'SyntheticsCreateBrowserCheckDnsOverrideArgs',
    'SyntheticsCreateBrowserCheckExcludedFileArgs',
    'SyntheticsCreateBrowserCheckHttpRequestHeaderArgs',
    'SyntheticsCreateBrowserCheckJavascriptFileArgs',
    'SyntheticsCreateBrowserCheckNotificationArgs',
    'SyntheticsCreateBrowserCheckNotificationEscalationArgs',
    'SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindowArgs',
    'SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoArgs',
    'SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLinkArgs',
    'SyntheticsCreateBrowserCheckNotificationNotificationWindowArgs',
    'SyntheticsCreateBrowserCheckNotificationNotifyWhoArgs',
    'SyntheticsCreateBrowserCheckNotificationNotifyWhoLinkArgs',
    'SyntheticsCreateBrowserCheckStepArgs',
    'SyntheticsCreateBrowserCheckSuccessCriteriaArgs',
    'SyntheticsCreateBrowserCheckThresholdMonitorArgs',
    'SyntheticsCreateBrowserCheckV2TestArgs',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingArgs',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthenticationArgs',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookieArgs',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeaderArgs',
    'SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverrideArgs',
    'SyntheticsCreateBrowserCheckV2TestTransactionArgs',
    'SyntheticsCreateBrowserCheckV2TestTransactionStepArgs',
    'SyntheticsCreateBrowserCheckV2TestTransactionStepOptionArgs',
    'SyntheticsCreateBrowserCheckViewportArgs',
    'SyntheticsCreateHttpCheckBlackoutPeriodArgs',
    'SyntheticsCreateHttpCheckCheckConnectionArgs',
    'SyntheticsCreateHttpCheckHttpRequestHeaderArgs',
    'SyntheticsCreateHttpCheckNotificationArgs',
    'SyntheticsCreateHttpCheckNotificationEscalationArgs',
    'SyntheticsCreateHttpCheckNotificationEscalationNotificationWindowArgs',
    'SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoArgs',
    'SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLinkArgs',
    'SyntheticsCreateHttpCheckNotificationNotificationWindowArgs',
    'SyntheticsCreateHttpCheckNotificationNotifyWhoArgs',
    'SyntheticsCreateHttpCheckNotificationNotifyWhoLinkArgs',
    'SyntheticsCreateHttpCheckSuccessCriteriaArgs',
    'SyntheticsCreateHttpCheckV2TestArgs',
    'SyntheticsCreateHttpCheckV2TestHeaderArgs',
    'SyntheticsCreateLocationV2LocationArgs',
    'SyntheticsCreatePortCheckV2TestArgs',
    'SyntheticsCreateVariableV2VariableArgs',
    'SyntheticsApiV2CheckTestArgs',
    'SyntheticsApiV2CheckTestDeviceArgs',
    'SyntheticsApiV2CheckTestDeviceNetworkConnectionArgs',
    'SyntheticsApiV2CheckTestRequestArgs',
    'SyntheticsApiV2CheckTestRequestConfigurationArgs',
    'SyntheticsApiV2CheckTestRequestSetupArgs',
    'SyntheticsApiV2CheckTestRequestValidationArgs',
    'SyntheticsBrowserV2CheckTestArgs',
    'SyntheticsBrowserV2CheckTestAdvancedSettingArgs',
    'SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationArgs',
    'SyntheticsBrowserV2CheckTestAdvancedSettingCookieArgs',
    'SyntheticsBrowserV2CheckTestAdvancedSettingHeaderArgs',
    'SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideArgs',
    'SyntheticsBrowserV2CheckTestBusinessTransactionArgs',
    'SyntheticsBrowserV2CheckTestBusinessTransactionStepArgs',
    'SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionArgs',
    'SyntheticsBrowserV2CheckTestDeviceArgs',
    'SyntheticsBrowserV2CheckTestDeviceNetworkConnectionArgs',
    'SyntheticsBrowserV2CheckTestTransactionArgs',
    'SyntheticsBrowserV2CheckTestTransactionStepArgs',
    'SyntheticsBrowserV2CheckTestTransactionStepOptionArgs',
    'SyntheticsCheckBrowserArgs',
    'SyntheticsCheckCheckConnectionArgs',
    'SyntheticsCheckCookieArgs',
    'SyntheticsCheckDnsOverrideArgs',
    'SyntheticsCheckExcludedFileArgs',
    'SyntheticsCheckJavascriptFileArgs',
    'SyntheticsCheckLinkArgs',
    'SyntheticsCheckStepArgs',
    'SyntheticsCheckThresholdMonitorArgs',
    'SyntheticsCheckViewportArgs',
    'SyntheticsDevicesV2CheckDeviceArgs',
    'SyntheticsDevicesV2CheckDeviceNetworkConnectionArgs',
    'SyntheticsHttpV2CheckTestArgs',
    'SyntheticsHttpV2CheckTestHeaderArgs',
    'SyntheticsLocationV2CheckLocationArgs',
    'SyntheticsLocationV2CheckMetaArgs',
    'SyntheticsLocationsV2CheckLocationArgs',
    'SyntheticsPortV2CheckTestArgs',
    'SyntheticsVariableV2CheckVariableArgs',
    'SyntheticsVariablesV2CheckVariableArgs',
]

@pulumi.input_type
class SyntheticsCreateApiCheckV2TestArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 device_id: pulumi.Input[int],
                 frequency: pulumi.Input[int],
                 location_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestArgs']]]] = None,
                 scheduling_strategy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestArgs']]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduling_strategy", value)


@pulumi.input_type
class SyntheticsCreateApiCheckV2TestRequestArgs:
    def __init__(__self__, *,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestConfigurationArgs']]]] = None,
                 setups: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestSetupArgs']]]] = None,
                 validations: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestValidationArgs']]]] = None):
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if setups is not None:
            pulumi.set(__self__, "setups", setups)
        if validations is not None:
            pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestConfigurationArgs']]]]:
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter
    def setups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestSetupArgs']]]]:
        return pulumi.get(self, "setups")

    @setups.setter
    def setups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestSetupArgs']]]]):
        pulumi.set(self, "setups", value)

    @property
    @pulumi.getter
    def validations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestValidationArgs']]]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateApiCheckV2TestRequestValidationArgs']]]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class SyntheticsCreateApiCheckV2TestRequestConfigurationArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request_method: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsCreateApiCheckV2TestRequestSetupArgs:
    def __init__(__self__, *,
                 extractor: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 variable: Optional[pulumi.Input[str]] = None):
        if extractor is not None:
            pulumi.set(__self__, "extractor", extractor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def extractor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extractor")

    @extractor.setter
    def extractor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extractor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class SyntheticsCreateApiCheckV2TestRequestValidationArgs:
    def __init__(__self__, *,
                 actual: Optional[pulumi.Input[str]] = None,
                 comparator: Optional[pulumi.Input[str]] = None,
                 expected: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if actual is not None:
            pulumi.set(__self__, "actual", actual)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actual(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "actual")

    @actual.setter
    def actual(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "actual", value)

    @property
    @pulumi.getter
    def comparator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def expected(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expected")

    @expected.setter
    def expected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckBlackoutPeriodArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 is_repeat: Optional[pulumi.Input[bool]] = None,
                 monthly_repeat_type: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if monthly_repeat_type is not None:
            pulumi.set(__self__, "monthly_repeat_type", monthly_repeat_type)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_repeat")

    @is_repeat.setter
    def is_repeat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_repeat", value)

    @property
    @pulumi.getter(name="monthlyRepeatType")
    def monthly_repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monthly_repeat_type")

    @monthly_repeat_type.setter
    def monthly_repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monthly_repeat_type", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckBrowserArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckCheckConnectionArgs:
    def __init__(__self__, *,
                 download_bandwidth: Optional[pulumi.Input[int]] = None,
                 latency: Optional[pulumi.Input[int]] = None,
                 packet_loss: Optional[pulumi.Input[float]] = None,
                 upload_bandwidth: Optional[pulumi.Input[int]] = None):
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "download_bandwidth")

    @download_bandwidth.setter
    def download_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_bandwidth", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "packet_loss")

    @packet_loss.setter
    def packet_loss(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "packet_loss", value)

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "upload_bandwidth")

    @upload_bandwidth.setter
    def upload_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_bandwidth", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckCookieArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckDnsOverrideArgs:
    def __init__(__self__, *,
                 original_domain: Optional[pulumi.Input[str]] = None,
                 original_host: Optional[pulumi.Input[str]] = None):
        if original_domain is not None:
            pulumi.set(__self__, "original_domain", original_domain)
        if original_host is not None:
            pulumi.set(__self__, "original_host", original_host)

    @property
    @pulumi.getter(name="originalDomain")
    def original_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_domain")

    @original_domain.setter
    def original_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_domain", value)

    @property
    @pulumi.getter(name="originalHost")
    def original_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_host")

    @original_host.setter
    def original_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_host", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckExcludedFileArgs:
    def __init__(__self__, *,
                 exclusion_type: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 preset_name: Optional[pulumi.Input[str]] = None):
        if exclusion_type is not None:
            pulumi.set(__self__, "exclusion_type", exclusion_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if preset_name is not None:
            pulumi.set(__self__, "preset_name", preset_name)

    @property
    @pulumi.getter(name="exclusionType")
    def exclusion_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclusion_type")

    @exclusion_type.setter
    def exclusion_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusion_type", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="presetName")
    def preset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preset_name")

    @preset_name.setter
    def preset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preset_name", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckHttpRequestHeaderArgs:
    def __init__(__self__, *,
                 user_agent: Optional[pulumi.Input[str]] = None):
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckJavascriptFileArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationArgs:
    def __init__(__self__, *,
                 call: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 escalations: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationArgs']]]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 notification_windows: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotificationWindowArgs']]]] = None,
                 notify_after_failure_count: Optional[pulumi.Input[int]] = None,
                 notify_on_location_failure: Optional[pulumi.Input[bool]] = None,
                 notify_whos: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotifyWhoArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None):
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if escalations is not None:
            pulumi.set(__self__, "escalations", escalations)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_after_failure_count is not None:
            pulumi.set(__self__, "notify_after_failure_count", notify_after_failure_count)
        if notify_on_location_failure is not None:
            pulumi.set(__self__, "notify_on_location_failure", notify_on_location_failure)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def escalations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationArgs']]]]:
        return pulumi.get(self, "escalations")

    @escalations.setter
    def escalations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationArgs']]]]):
        pulumi.set(self, "escalations", value)

    @property
    @pulumi.getter
    def muted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "muted")

    @muted.setter
    def muted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "muted", value)

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotificationWindowArgs']]]]:
        return pulumi.get(self, "notification_windows")

    @notification_windows.setter
    def notification_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotificationWindowArgs']]]]):
        pulumi.set(self, "notification_windows", value)

    @property
    @pulumi.getter(name="notifyAfterFailureCount")
    def notify_after_failure_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "notify_after_failure_count")

    @notify_after_failure_count.setter
    def notify_after_failure_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notify_after_failure_count", value)

    @property
    @pulumi.getter(name="notifyOnLocationFailure")
    def notify_on_location_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "notify_on_location_failure")

    @notify_on_location_failure.setter
    def notify_on_location_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_on_location_failure", value)

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotifyWhoArgs']]]]:
        return pulumi.get(self, "notify_whos")

    @notify_whos.setter
    def notify_whos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotifyWhoArgs']]]]):
        pulumi.set(self, "notify_whos", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationEscalationArgs:
    def __init__(__self__, *,
                 after_minutes: Optional[pulumi.Input[int]] = None,
                 call: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 is_repeat: Optional[pulumi.Input[bool]] = None,
                 notification_windows: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindowArgs']]]] = None,
                 notify_whos: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None):
        if after_minutes is not None:
            pulumi.set(__self__, "after_minutes", after_minutes)
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter(name="afterMinutes")
    def after_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "after_minutes")

    @after_minutes.setter
    def after_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "after_minutes", value)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_repeat")

    @is_repeat.setter
    def is_repeat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_repeat", value)

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindowArgs']]]]:
        return pulumi.get(self, "notification_windows")

    @notification_windows.setter
    def notification_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindowArgs']]]]):
        pulumi.set(self, "notification_windows", value)

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoArgs']]]]:
        return pulumi.get(self, "notify_whos")

    @notify_whos.setter
    def notify_whos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoArgs']]]]):
        pulumi.set(self, "notify_whos", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationEscalationNotificationWindowArgs:
    def __init__(__self__, *,
                 duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoArgs:
    def __init__(__self__, *,
                 call: Optional[pulumi.Input[bool]] = None,
                 custom_user_email: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLinkArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_user_email")

    @custom_user_email.setter
    def custom_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_user_email", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationEscalationNotifyWhoLinkArgs:
    def __init__(__self__, *,
                 self_html: Optional[pulumi.Input[str]] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_html")

    @self_html.setter
    def self_html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_html", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationNotificationWindowArgs:
    def __init__(__self__, *,
                 duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationNotifyWhoArgs:
    def __init__(__self__, *,
                 call: Optional[pulumi.Input[bool]] = None,
                 custom_user_email: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotifyWhoLinkArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_user_email")

    @custom_user_email.setter
    def custom_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_user_email", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotifyWhoLinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckNotificationNotifyWhoLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckNotificationNotifyWhoLinkArgs:
    def __init__(__self__, *,
                 self_html: Optional[pulumi.Input[str]] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_html")

    @self_html.setter
    def self_html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_html", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckStepArgs:
    def __init__(__self__, *,
                 how: Optional[pulumi.Input[str]] = None,
                 item_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None,
                 what: Optional[pulumi.Input[str]] = None):
        if how is not None:
            pulumi.set(__self__, "how", how)
        if item_method is not None:
            pulumi.set(__self__, "item_method", item_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if what is not None:
            pulumi.set(__self__, "what", what)

    @property
    @pulumi.getter
    def how(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "how")

    @how.setter
    def how(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "how", value)

    @property
    @pulumi.getter(name="itemMethod")
    def item_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "item_method")

    @item_method.setter
    def item_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "item_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter
    def what(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "what")

    @what.setter
    def what(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "what", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckSuccessCriteriaArgs:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 comparison_string: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if comparison_string is not None:
            pulumi.set(__self__, "comparison_string", comparison_string)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="comparisonString")
    def comparison_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparison_string")

    @comparison_string.setter
    def comparison_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_string", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckThresholdMonitorArgs:
    def __init__(__self__, *,
                 comparison_type: Optional[pulumi.Input[str]] = None,
                 matcher: Optional[pulumi.Input[str]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        if comparison_type is not None:
            pulumi.set(__self__, "comparison_type", comparison_type)
        if matcher is not None:
            pulumi.set(__self__, "matcher", matcher)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="comparisonType")
    def comparison_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparison_type")

    @comparison_type.setter
    def comparison_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_type", value)

    @property
    @pulumi.getter
    def matcher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "matcher")

    @matcher.setter
    def matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matcher", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 start_url: pulumi.Input[str],
                 transactions: pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionArgs']]],
                 url_protocol: pulumi.Input[str],
                 active: Optional[pulumi.Input[bool]] = None,
                 advanced_settings: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingArgs']]]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 location_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scheduling_strategy: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_url", start_url)
        pulumi.set(__self__, "transactions", transactions)
        pulumi.set(__self__, "url_protocol", url_protocol)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if advanced_settings is not None:
            pulumi.set(__self__, "advanced_settings", advanced_settings)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startUrl")
    def start_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_url")

    @start_url.setter
    def start_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_url", value)

    @property
    @pulumi.getter
    def transactions(self) -> pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionArgs']]]:
        return pulumi.get(self, "transactions")

    @transactions.setter
    def transactions(self, value: pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionArgs']]]):
        pulumi.set(self, "transactions", value)

    @property
    @pulumi.getter(name="urlProtocol")
    def url_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_protocol")

    @url_protocol.setter
    def url_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_protocol", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="advancedSettings")
    def advanced_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingArgs']]]]:
        return pulumi.get(self, "advanced_settings")

    @advanced_settings.setter
    def advanced_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingArgs']]]]):
        pulumi.set(self, "advanced_settings", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduling_strategy", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingArgs:
    def __init__(__self__, *,
                 authentications: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthenticationArgs']]]] = None,
                 cookies: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookieArgs']]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeaderArgs']]]] = None,
                 host_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverrideArgs']]]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None,
                 verify_certificates: Optional[pulumi.Input[bool]] = None):
        if authentications is not None:
            pulumi.set(__self__, "authentications", authentications)
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if host_overrides is not None:
            pulumi.set(__self__, "host_overrides", host_overrides)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)
        if verify_certificates is not None:
            pulumi.set(__self__, "verify_certificates", verify_certificates)

    @property
    @pulumi.getter
    def authentications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthenticationArgs']]]]:
        return pulumi.get(self, "authentications")

    @authentications.setter
    def authentications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthenticationArgs']]]]):
        pulumi.set(self, "authentications", value)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookieArgs']]]]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookieArgs']]]]):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="hostOverrides")
    def host_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverrideArgs']]]]:
        return pulumi.get(self, "host_overrides")

    @host_overrides.setter
    def host_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverrideArgs']]]]):
        pulumi.set(self, "host_overrides", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="verifyCertificates")
    def verify_certificates(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_certificates")

    @verify_certificates.setter
    def verify_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_certificates", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingAuthenticationArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingCookieArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingHeaderArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestAdvancedSettingHostOverrideArgs:
    def __init__(__self__, *,
                 keep_host_header: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        if keep_host_header is not None:
            pulumi.set(__self__, "keep_host_header", keep_host_header)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="keepHostHeader")
    def keep_host_header(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_host_header")

    @keep_host_header.setter
    def keep_host_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_host_header", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestTransactionArgs:
    def __init__(__self__, *,
                 steps: pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionStepArgs']]],
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "steps", steps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionStepArgs']]]:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionStepArgs']]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestTransactionStepArgs:
    def __init__(__self__, *,
                 wait_for_nav: pulumi.Input[bool],
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 option_selector: Optional[pulumi.Input[str]] = None,
                 option_selector_type: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionStepOptionArgs']]]] = None,
                 selector: Optional[pulumi.Input[str]] = None,
                 selector_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 variable_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "wait_for_nav", wait_for_nav)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option_selector is not None:
            pulumi.set(__self__, "option_selector", option_selector)
        if option_selector_type is not None:
            pulumi.set(__self__, "option_selector_type", option_selector_type)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)

    @property
    @pulumi.getter(name="waitForNav")
    def wait_for_nav(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "wait_for_nav")

    @wait_for_nav.setter
    def wait_for_nav(self, value: pulumi.Input[bool]):
        pulumi.set(self, "wait_for_nav", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="optionSelector")
    def option_selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_selector")

    @option_selector.setter
    def option_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_selector", value)

    @property
    @pulumi.getter(name="optionSelectorType")
    def option_selector_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_selector_type")

    @option_selector_type.setter
    def option_selector_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_selector_type", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionStepOptionArgs']]]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateBrowserCheckV2TestTransactionStepOptionArgs']]]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector_type")

    @selector_type.setter
    def selector_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "variable_name", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckV2TestTransactionStepOptionArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsCreateBrowserCheckViewportArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckBlackoutPeriodArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 is_repeat: Optional[pulumi.Input[bool]] = None,
                 monthly_repeat_type: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if monthly_repeat_type is not None:
            pulumi.set(__self__, "monthly_repeat_type", monthly_repeat_type)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_repeat")

    @is_repeat.setter
    def is_repeat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_repeat", value)

    @property
    @pulumi.getter(name="monthlyRepeatType")
    def monthly_repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monthly_repeat_type")

    @monthly_repeat_type.setter
    def monthly_repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monthly_repeat_type", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckCheckConnectionArgs:
    def __init__(__self__, *,
                 download_bandwidth: Optional[pulumi.Input[int]] = None,
                 latency: Optional[pulumi.Input[int]] = None,
                 packet_loss: Optional[pulumi.Input[float]] = None,
                 upload_bandwidth: Optional[pulumi.Input[int]] = None):
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "download_bandwidth")

    @download_bandwidth.setter
    def download_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download_bandwidth", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "packet_loss")

    @packet_loss.setter
    def packet_loss(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "packet_loss", value)

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "upload_bandwidth")

    @upload_bandwidth.setter
    def upload_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload_bandwidth", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckHttpRequestHeaderArgs:
    def __init__(__self__, *,
                 user_agent: Optional[pulumi.Input[str]] = None):
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationArgs:
    def __init__(__self__, *,
                 call: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 escalations: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationArgs']]]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 notification_windows: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotificationWindowArgs']]]] = None,
                 notify_after_failure_count: Optional[pulumi.Input[int]] = None,
                 notify_on_location_failure: Optional[pulumi.Input[bool]] = None,
                 notify_whos: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotifyWhoArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None):
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if escalations is not None:
            pulumi.set(__self__, "escalations", escalations)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_after_failure_count is not None:
            pulumi.set(__self__, "notify_after_failure_count", notify_after_failure_count)
        if notify_on_location_failure is not None:
            pulumi.set(__self__, "notify_on_location_failure", notify_on_location_failure)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def escalations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationArgs']]]]:
        return pulumi.get(self, "escalations")

    @escalations.setter
    def escalations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationArgs']]]]):
        pulumi.set(self, "escalations", value)

    @property
    @pulumi.getter
    def muted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "muted")

    @muted.setter
    def muted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "muted", value)

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotificationWindowArgs']]]]:
        return pulumi.get(self, "notification_windows")

    @notification_windows.setter
    def notification_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotificationWindowArgs']]]]):
        pulumi.set(self, "notification_windows", value)

    @property
    @pulumi.getter(name="notifyAfterFailureCount")
    def notify_after_failure_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "notify_after_failure_count")

    @notify_after_failure_count.setter
    def notify_after_failure_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notify_after_failure_count", value)

    @property
    @pulumi.getter(name="notifyOnLocationFailure")
    def notify_on_location_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "notify_on_location_failure")

    @notify_on_location_failure.setter
    def notify_on_location_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_on_location_failure", value)

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotifyWhoArgs']]]]:
        return pulumi.get(self, "notify_whos")

    @notify_whos.setter
    def notify_whos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotifyWhoArgs']]]]):
        pulumi.set(self, "notify_whos", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationEscalationArgs:
    def __init__(__self__, *,
                 after_minutes: Optional[pulumi.Input[int]] = None,
                 call: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 is_repeat: Optional[pulumi.Input[bool]] = None,
                 notification_windows: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotificationWindowArgs']]]] = None,
                 notify_whos: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None):
        if after_minutes is not None:
            pulumi.set(__self__, "after_minutes", after_minutes)
        if call is not None:
            pulumi.set(__self__, "call", call)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if is_repeat is not None:
            pulumi.set(__self__, "is_repeat", is_repeat)
        if notification_windows is not None:
            pulumi.set(__self__, "notification_windows", notification_windows)
        if notify_whos is not None:
            pulumi.set(__self__, "notify_whos", notify_whos)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)

    @property
    @pulumi.getter(name="afterMinutes")
    def after_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "after_minutes")

    @after_minutes.setter
    def after_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "after_minutes", value)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="isRepeat")
    def is_repeat(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_repeat")

    @is_repeat.setter
    def is_repeat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_repeat", value)

    @property
    @pulumi.getter(name="notificationWindows")
    def notification_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotificationWindowArgs']]]]:
        return pulumi.get(self, "notification_windows")

    @notification_windows.setter
    def notification_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotificationWindowArgs']]]]):
        pulumi.set(self, "notification_windows", value)

    @property
    @pulumi.getter(name="notifyWhos")
    def notify_whos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoArgs']]]]:
        return pulumi.get(self, "notify_whos")

    @notify_whos.setter
    def notify_whos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoArgs']]]]):
        pulumi.set(self, "notify_whos", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationEscalationNotificationWindowArgs:
    def __init__(__self__, *,
                 duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoArgs:
    def __init__(__self__, *,
                 call: Optional[pulumi.Input[bool]] = None,
                 custom_user_email: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLinkArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_user_email")

    @custom_user_email.setter
    def custom_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_user_email", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationEscalationNotifyWhoLinkArgs:
    def __init__(__self__, *,
                 self_html: Optional[pulumi.Input[str]] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_html")

    @self_html.setter
    def self_html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_html", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationNotificationWindowArgs:
    def __init__(__self__, *,
                 duration_in_minutes: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if duration_in_minutes is not None:
            pulumi.set(__self__, "duration_in_minutes", duration_in_minutes)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="durationInMinutes")
    def duration_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "duration_in_minutes")

    @duration_in_minutes.setter
    def duration_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_in_minutes", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationNotifyWhoArgs:
    def __init__(__self__, *,
                 call: Optional[pulumi.Input[bool]] = None,
                 custom_user_email: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotifyWhoLinkArgs']]]] = None,
                 sms: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if call is not None:
            pulumi.set(__self__, "call", call)
        if custom_user_email is not None:
            pulumi.set(__self__, "custom_user_email", custom_user_email)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def call(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "call")

    @call.setter
    def call(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call", value)

    @property
    @pulumi.getter(name="customUserEmail")
    def custom_user_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_user_email")

    @custom_user_email.setter
    def custom_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_user_email", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotifyWhoLinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckNotificationNotifyWhoLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckNotificationNotifyWhoLinkArgs:
    def __init__(__self__, *,
                 self_html: Optional[pulumi.Input[str]] = None):
        if self_html is not None:
            pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_html")

    @self_html.setter
    def self_html(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_html", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckSuccessCriteriaArgs:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 comparison_string: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if comparison_string is not None:
            pulumi.set(__self__, "comparison_string", comparison_string)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="comparisonString")
    def comparison_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparison_string")

    @comparison_string.setter
    def comparison_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_string", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckV2TestArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 frequency: pulumi.Input[int],
                 location_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 request_method: pulumi.Input[str],
                 url: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckV2TestHeaderArgs']]]] = None,
                 scheduling_strategy: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckV2TestHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsCreateHttpCheckV2TestHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreateHttpCheckV2TestHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCreateLocationV2LocationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 label: pulumi.Input[str],
                 country: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCreatePortCheckV2TestArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 frequency: pulumi.Input[int],
                 host: pulumi.Input[str],
                 location_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 scheduling_strategy: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsCreateVariableV2VariableArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 name: pulumi.Input[str],
                 secret: pulumi.Input[bool],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[bool]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestArgs:
    def __init__(__self__, *,
                 active: bool,
                 created_at: str,
                 devices: Sequence['SyntheticsApiV2CheckTestDeviceArgs'],
                 frequency: int,
                 id: int,
                 name: str,
                 requests: Sequence['SyntheticsApiV2CheckTestRequestArgs'],
                 scheduling_strategy: str,
                 type: str,
                 updated_at: str,
                 location_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "requests", requests)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: bool):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: str):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def devices(self) -> Sequence['SyntheticsApiV2CheckTestDeviceArgs']:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Sequence['SyntheticsApiV2CheckTestDeviceArgs']):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: int):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def requests(self) -> Sequence['SyntheticsApiV2CheckTestRequestArgs']:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Sequence['SyntheticsApiV2CheckTestRequestArgs']):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: str):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: str):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "location_ids", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestDeviceArgs:
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 network_connections: Sequence['SyntheticsApiV2CheckTestDeviceNetworkConnectionArgs'],
                 user_agent: str,
                 viewport_height: Optional[int] = None,
                 viewport_width: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_connections", network_connections)
        pulumi.set(__self__, "user_agent", user_agent)
        if viewport_height is not None:
            pulumi.set(__self__, "viewport_height", viewport_height)
        if viewport_width is not None:
            pulumi.set(__self__, "viewport_width", viewport_width)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: str):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="networkConnections")
    def network_connections(self) -> Sequence['SyntheticsApiV2CheckTestDeviceNetworkConnectionArgs']:
        return pulumi.get(self, "network_connections")

    @network_connections.setter
    def network_connections(self, value: Sequence['SyntheticsApiV2CheckTestDeviceNetworkConnectionArgs']):
        pulumi.set(self, "network_connections", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: str):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="viewportHeight")
    def viewport_height(self) -> Optional[int]:
        return pulumi.get(self, "viewport_height")

    @viewport_height.setter
    def viewport_height(self, value: Optional[int]):
        pulumi.set(self, "viewport_height", value)

    @property
    @pulumi.getter(name="viewportWidth")
    def viewport_width(self) -> Optional[int]:
        return pulumi.get(self, "viewport_width")

    @viewport_width.setter
    def viewport_width(self, value: Optional[int]):
        pulumi.set(self, "viewport_width", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestDeviceNetworkConnectionArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 download_bandwidth: Optional[int] = None,
                 latency: Optional[int] = None,
                 packet_loss: Optional[int] = None,
                 upload_bandwidth: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "download_bandwidth")

    @download_bandwidth.setter
    def download_bandwidth(self, value: Optional[int]):
        pulumi.set(self, "download_bandwidth", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[int]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss")

    @packet_loss.setter
    def packet_loss(self, value: Optional[int]):
        pulumi.set(self, "packet_loss", value)

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")

    @upload_bandwidth.setter
    def upload_bandwidth(self, value: Optional[int]):
        pulumi.set(self, "upload_bandwidth", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestRequestArgs:
    def __init__(__self__, *,
                 setups: Sequence['SyntheticsApiV2CheckTestRequestSetupArgs'],
                 validations: Sequence['SyntheticsApiV2CheckTestRequestValidationArgs'],
                 configurations: Optional[Sequence['SyntheticsApiV2CheckTestRequestConfigurationArgs']] = None):
        pulumi.set(__self__, "setups", setups)
        pulumi.set(__self__, "validations", validations)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def setups(self) -> Sequence['SyntheticsApiV2CheckTestRequestSetupArgs']:
        return pulumi.get(self, "setups")

    @setups.setter
    def setups(self, value: Sequence['SyntheticsApiV2CheckTestRequestSetupArgs']):
        pulumi.set(self, "setups", value)

    @property
    @pulumi.getter
    def validations(self) -> Sequence['SyntheticsApiV2CheckTestRequestValidationArgs']:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: Sequence['SyntheticsApiV2CheckTestRequestValidationArgs']):
        pulumi.set(self, "validations", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[Sequence['SyntheticsApiV2CheckTestRequestConfigurationArgs']]:
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[Sequence['SyntheticsApiV2CheckTestRequestConfigurationArgs']]):
        pulumi.set(self, "configurations", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestRequestConfigurationArgs:
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 headers: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 request_method: Optional[str] = None,
                 url: Optional[str] = None):
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[str]:
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional[str]):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestRequestSetupArgs:
    def __init__(__self__, *,
                 extractor: Optional[str] = None,
                 name: Optional[str] = None,
                 source: Optional[str] = None,
                 type: Optional[str] = None,
                 variable: Optional[str] = None):
        if extractor is not None:
            pulumi.set(__self__, "extractor", extractor)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def extractor(self) -> Optional[str]:
        return pulumi.get(self, "extractor")

    @extractor.setter
    def extractor(self, value: Optional[str]):
        pulumi.set(self, "extractor", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[str]:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[str]):
        pulumi.set(self, "variable", value)


@pulumi.input_type
class SyntheticsApiV2CheckTestRequestValidationArgs:
    def __init__(__self__, *,
                 actual: Optional[str] = None,
                 comparator: Optional[str] = None,
                 expected: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if actual is not None:
            pulumi.set(__self__, "actual", actual)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if expected is not None:
            pulumi.set(__self__, "expected", expected)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def actual(self) -> Optional[str]:
        return pulumi.get(self, "actual")

    @actual.setter
    def actual(self, value: Optional[str]):
        pulumi.set(self, "actual", value)

    @property
    @pulumi.getter
    def comparator(self) -> Optional[str]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: Optional[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def expected(self) -> Optional[str]:
        return pulumi.get(self, "expected")

    @expected.setter
    def expected(self, value: Optional[str]):
        pulumi.set(self, "expected", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestArgs:
    def __init__(__self__, *,
                 active: bool,
                 advanced_settings: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingArgs'],
                 business_transactions: Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionArgs'],
                 created_at: str,
                 devices: Sequence['SyntheticsBrowserV2CheckTestDeviceArgs'],
                 frequency: int,
                 id: int,
                 location_ids: Sequence[str],
                 name: str,
                 scheduling_strategy: str,
                 transactions: Sequence['SyntheticsBrowserV2CheckTestTransactionArgs'],
                 type: str,
                 updated_at: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "advanced_settings", advanced_settings)
        pulumi.set(__self__, "business_transactions", business_transactions)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "devices", devices)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location_ids", location_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "transactions", transactions)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: bool):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="advancedSettings")
    def advanced_settings(self) -> Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingArgs']:
        return pulumi.get(self, "advanced_settings")

    @advanced_settings.setter
    def advanced_settings(self, value: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingArgs']):
        pulumi.set(self, "advanced_settings", value)

    @property
    @pulumi.getter(name="businessTransactions")
    def business_transactions(self) -> Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionArgs']:
        return pulumi.get(self, "business_transactions")

    @business_transactions.setter
    def business_transactions(self, value: Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionArgs']):
        pulumi.set(self, "business_transactions", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: str):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def devices(self) -> Sequence['SyntheticsBrowserV2CheckTestDeviceArgs']:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Sequence['SyntheticsBrowserV2CheckTestDeviceArgs']):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: int):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Sequence[str]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Sequence[str]):
        pulumi.set(self, "location_ids", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: str):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def transactions(self) -> Sequence['SyntheticsBrowserV2CheckTestTransactionArgs']:
        return pulumi.get(self, "transactions")

    @transactions.setter
    def transactions(self, value: Sequence['SyntheticsBrowserV2CheckTestTransactionArgs']):
        pulumi.set(self, "transactions", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: str):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestAdvancedSettingArgs:
    def __init__(__self__, *,
                 authentications: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationArgs'],
                 cookies: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingCookieArgs'],
                 headers: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingHeaderArgs'],
                 host_overrides: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideArgs'],
                 user_agent: str,
                 verify_certificates: bool):
        pulumi.set(__self__, "authentications", authentications)
        pulumi.set(__self__, "cookies", cookies)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "host_overrides", host_overrides)
        pulumi.set(__self__, "user_agent", user_agent)
        pulumi.set(__self__, "verify_certificates", verify_certificates)

    @property
    @pulumi.getter
    def authentications(self) -> Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationArgs']:
        return pulumi.get(self, "authentications")

    @authentications.setter
    def authentications(self, value: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationArgs']):
        pulumi.set(self, "authentications", value)

    @property
    @pulumi.getter
    def cookies(self) -> Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingCookieArgs']:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingCookieArgs']):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingHeaderArgs']:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingHeaderArgs']):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="hostOverrides")
    def host_overrides(self) -> Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideArgs']:
        return pulumi.get(self, "host_overrides")

    @host_overrides.setter
    def host_overrides(self, value: Sequence['SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideArgs']):
        pulumi.set(self, "host_overrides", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: str):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="verifyCertificates")
    def verify_certificates(self) -> bool:
        return pulumi.get(self, "verify_certificates")

    @verify_certificates.setter
    def verify_certificates(self, value: bool):
        pulumi.set(self, "verify_certificates", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestAdvancedSettingAuthenticationArgs:
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestAdvancedSettingCookieArgs:
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 key: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestAdvancedSettingHeaderArgs:
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestAdvancedSettingHostOverrideArgs:
    def __init__(__self__, *,
                 keep_host_header: Optional[bool] = None,
                 source: Optional[str] = None,
                 target: Optional[str] = None):
        if keep_host_header is not None:
            pulumi.set(__self__, "keep_host_header", keep_host_header)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="keepHostHeader")
    def keep_host_header(self) -> Optional[bool]:
        return pulumi.get(self, "keep_host_header")

    @keep_host_header.setter
    def keep_host_header(self, value: Optional[bool]):
        pulumi.set(self, "keep_host_header", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[str]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestBusinessTransactionArgs:
    def __init__(__self__, *,
                 steps: Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionStepArgs'],
                 name: Optional[str] = None):
        pulumi.set(__self__, "steps", steps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionStepArgs']:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionStepArgs']):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestBusinessTransactionStepArgs:
    def __init__(__self__, *,
                 options: Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionArgs'],
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 option_selector: Optional[str] = None,
                 option_selector_type: Optional[str] = None,
                 selector: Optional[str] = None,
                 selector_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 wait_for_nav: Optional[bool] = None):
        pulumi.set(__self__, "options", options)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option_selector is not None:
            pulumi.set(__self__, "option_selector", option_selector)
        if option_selector_type is not None:
            pulumi.set(__self__, "option_selector_type", option_selector_type)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if wait_for_nav is not None:
            pulumi.set(__self__, "wait_for_nav", wait_for_nav)

    @property
    @pulumi.getter
    def options(self) -> Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Sequence['SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="optionSelector")
    def option_selector(self) -> Optional[str]:
        return pulumi.get(self, "option_selector")

    @option_selector.setter
    def option_selector(self, value: Optional[str]):
        pulumi.set(self, "option_selector", value)

    @property
    @pulumi.getter(name="optionSelectorType")
    def option_selector_type(self) -> Optional[str]:
        return pulumi.get(self, "option_selector_type")

    @option_selector_type.setter
    def option_selector_type(self, value: Optional[str]):
        pulumi.set(self, "option_selector_type", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[str]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")

    @selector_type.setter
    def selector_type(self, value: Optional[str]):
        pulumi.set(self, "selector_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="waitForNav")
    def wait_for_nav(self) -> Optional[bool]:
        return pulumi.get(self, "wait_for_nav")

    @wait_for_nav.setter
    def wait_for_nav(self, value: Optional[bool]):
        pulumi.set(self, "wait_for_nav", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestBusinessTransactionStepOptionArgs:
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestDeviceArgs:
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 network_connections: Sequence['SyntheticsBrowserV2CheckTestDeviceNetworkConnectionArgs'],
                 user_agent: str,
                 viewport_height: Optional[int] = None,
                 viewport_width: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_connections", network_connections)
        pulumi.set(__self__, "user_agent", user_agent)
        if viewport_height is not None:
            pulumi.set(__self__, "viewport_height", viewport_height)
        if viewport_width is not None:
            pulumi.set(__self__, "viewport_width", viewport_width)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: str):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="networkConnections")
    def network_connections(self) -> Sequence['SyntheticsBrowserV2CheckTestDeviceNetworkConnectionArgs']:
        return pulumi.get(self, "network_connections")

    @network_connections.setter
    def network_connections(self, value: Sequence['SyntheticsBrowserV2CheckTestDeviceNetworkConnectionArgs']):
        pulumi.set(self, "network_connections", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: str):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="viewportHeight")
    def viewport_height(self) -> Optional[int]:
        return pulumi.get(self, "viewport_height")

    @viewport_height.setter
    def viewport_height(self, value: Optional[int]):
        pulumi.set(self, "viewport_height", value)

    @property
    @pulumi.getter(name="viewportWidth")
    def viewport_width(self) -> Optional[int]:
        return pulumi.get(self, "viewport_width")

    @viewport_width.setter
    def viewport_width(self, value: Optional[int]):
        pulumi.set(self, "viewport_width", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestDeviceNetworkConnectionArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 download_bandwidth: Optional[int] = None,
                 latency: Optional[int] = None,
                 packet_loss: Optional[int] = None,
                 upload_bandwidth: Optional[int] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if download_bandwidth is not None:
            pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if packet_loss is not None:
            pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "download_bandwidth")

    @download_bandwidth.setter
    def download_bandwidth(self, value: Optional[int]):
        pulumi.set(self, "download_bandwidth", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[int]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[int]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> Optional[int]:
        return pulumi.get(self, "packet_loss")

    @packet_loss.setter
    def packet_loss(self, value: Optional[int]):
        pulumi.set(self, "packet_loss", value)

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")

    @upload_bandwidth.setter
    def upload_bandwidth(self, value: Optional[int]):
        pulumi.set(self, "upload_bandwidth", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestTransactionArgs:
    def __init__(__self__, *,
                 steps: Sequence['SyntheticsBrowserV2CheckTestTransactionStepArgs'],
                 name: Optional[str] = None):
        pulumi.set(__self__, "steps", steps)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def steps(self) -> Sequence['SyntheticsBrowserV2CheckTestTransactionStepArgs']:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Sequence['SyntheticsBrowserV2CheckTestTransactionStepArgs']):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestTransactionStepArgs:
    def __init__(__self__, *,
                 options: Sequence['SyntheticsBrowserV2CheckTestTransactionStepOptionArgs'],
                 action: Optional[str] = None,
                 name: Optional[str] = None,
                 option_selector: Optional[str] = None,
                 option_selector_type: Optional[str] = None,
                 selector: Optional[str] = None,
                 selector_type: Optional[str] = None,
                 type: Optional[str] = None,
                 url: Optional[str] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 wait_for_nav: Optional[bool] = None):
        pulumi.set(__self__, "options", options)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if option_selector is not None:
            pulumi.set(__self__, "option_selector", option_selector)
        if option_selector_type is not None:
            pulumi.set(__self__, "option_selector_type", option_selector_type)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if wait_for_nav is not None:
            pulumi.set(__self__, "wait_for_nav", wait_for_nav)

    @property
    @pulumi.getter
    def options(self) -> Sequence['SyntheticsBrowserV2CheckTestTransactionStepOptionArgs']:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Sequence['SyntheticsBrowserV2CheckTestTransactionStepOptionArgs']):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="optionSelector")
    def option_selector(self) -> Optional[str]:
        return pulumi.get(self, "option_selector")

    @option_selector.setter
    def option_selector(self, value: Optional[str]):
        pulumi.set(self, "option_selector", value)

    @property
    @pulumi.getter(name="optionSelectorType")
    def option_selector_type(self) -> Optional[str]:
        return pulumi.get(self, "option_selector_type")

    @option_selector_type.setter
    def option_selector_type(self, value: Optional[str]):
        pulumi.set(self, "option_selector_type", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[str]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")

    @selector_type.setter
    def selector_type(self, value: Optional[str]):
        pulumi.set(self, "selector_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter(name="waitForNav")
    def wait_for_nav(self) -> Optional[bool]:
        return pulumi.get(self, "wait_for_nav")

    @wait_for_nav.setter
    def wait_for_nav(self, value: Optional[bool]):
        pulumi.set(self, "wait_for_nav", value)


@pulumi.input_type
class SyntheticsBrowserV2CheckTestTransactionStepOptionArgs:
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsCheckBrowserArgs:
    def __init__(__self__, *,
                 type: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsCheckCheckConnectionArgs:
    def __init__(__self__, *,
                 download_bandwidth: int,
                 latency: int,
                 packet_loss: int,
                 upload_bandwidth: int):
        pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "packet_loss", packet_loss)
        pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> int:
        return pulumi.get(self, "download_bandwidth")

    @download_bandwidth.setter
    def download_bandwidth(self, value: int):
        pulumi.set(self, "download_bandwidth", value)

    @property
    @pulumi.getter
    def latency(self) -> int:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: int):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> int:
        return pulumi.get(self, "packet_loss")

    @packet_loss.setter
    def packet_loss(self, value: int):
        pulumi.set(self, "packet_loss", value)

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> int:
        return pulumi.get(self, "upload_bandwidth")

    @upload_bandwidth.setter
    def upload_bandwidth(self, value: int):
        pulumi.set(self, "upload_bandwidth", value)


@pulumi.input_type
class SyntheticsCheckCookieArgs:
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 key: Optional[str] = None,
                 path: Optional[str] = None,
                 value: Optional[str] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCheckDnsOverrideArgs:
    def __init__(__self__, *,
                 original_domain: Optional[str] = None,
                 original_host: Optional[str] = None):
        if original_domain is not None:
            pulumi.set(__self__, "original_domain", original_domain)
        if original_host is not None:
            pulumi.set(__self__, "original_host", original_host)

    @property
    @pulumi.getter(name="originalDomain")
    def original_domain(self) -> Optional[str]:
        return pulumi.get(self, "original_domain")

    @original_domain.setter
    def original_domain(self, value: Optional[str]):
        pulumi.set(self, "original_domain", value)

    @property
    @pulumi.getter(name="originalHost")
    def original_host(self) -> Optional[str]:
        return pulumi.get(self, "original_host")

    @original_host.setter
    def original_host(self, value: Optional[str]):
        pulumi.set(self, "original_host", value)


@pulumi.input_type
class SyntheticsCheckExcludedFileArgs:
    def __init__(__self__, *,
                 exclusion_type: Optional[str] = None,
                 pattern: Optional[str] = None,
                 preset_name: Optional[str] = None):
        if exclusion_type is not None:
            pulumi.set(__self__, "exclusion_type", exclusion_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if preset_name is not None:
            pulumi.set(__self__, "preset_name", preset_name)

    @property
    @pulumi.getter(name="exclusionType")
    def exclusion_type(self) -> Optional[str]:
        return pulumi.get(self, "exclusion_type")

    @exclusion_type.setter
    def exclusion_type(self, value: Optional[str]):
        pulumi.set(self, "exclusion_type", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[str]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="presetName")
    def preset_name(self) -> Optional[str]:
        return pulumi.get(self, "preset_name")

    @preset_name.setter
    def preset_name(self, value: Optional[str]):
        pulumi.set(self, "preset_name", value)


@pulumi.input_type
class SyntheticsCheckJavascriptFileArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyntheticsCheckLinkArgs:
    def __init__(__self__, *,
                 last_run: str,
                 metrics: str,
                 self: str,
                 self_html: str):
        pulumi.set(__self__, "last_run", last_run)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "self", self)
        pulumi.set(__self__, "self_html", self_html)

    @property
    @pulumi.getter(name="lastRun")
    def last_run(self) -> str:
        return pulumi.get(self, "last_run")

    @last_run.setter
    def last_run(self, value: str):
        pulumi.set(self, "last_run", value)

    @property
    @pulumi.getter
    def metrics(self) -> str:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: str):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def self(self) -> str:
        return pulumi.get(self, "self")

    @self.setter
    def self(self, value: str):
        pulumi.set(self, "self", value)

    @property
    @pulumi.getter(name="selfHtml")
    def self_html(self) -> str:
        return pulumi.get(self, "self_html")

    @self_html.setter
    def self_html(self, value: str):
        pulumi.set(self, "self_html", value)


@pulumi.input_type
class SyntheticsCheckStepArgs:
    def __init__(__self__, *,
                 how: Optional[str] = None,
                 item_method: Optional[str] = None,
                 name: Optional[str] = None,
                 position: Optional[int] = None,
                 value: Optional[str] = None,
                 variable_name: Optional[str] = None,
                 what: Optional[str] = None):
        if how is not None:
            pulumi.set(__self__, "how", how)
        if item_method is not None:
            pulumi.set(__self__, "item_method", item_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable_name is not None:
            pulumi.set(__self__, "variable_name", variable_name)
        if what is not None:
            pulumi.set(__self__, "what", what)

    @property
    @pulumi.getter
    def how(self) -> Optional[str]:
        return pulumi.get(self, "how")

    @how.setter
    def how(self, value: Optional[str]):
        pulumi.set(self, "how", value)

    @property
    @pulumi.getter(name="itemMethod")
    def item_method(self) -> Optional[str]:
        return pulumi.get(self, "item_method")

    @item_method.setter
    def item_method(self, value: Optional[str]):
        pulumi.set(self, "item_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[int]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[int]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> Optional[str]:
        return pulumi.get(self, "variable_name")

    @variable_name.setter
    def variable_name(self, value: Optional[str]):
        pulumi.set(self, "variable_name", value)

    @property
    @pulumi.getter
    def what(self) -> Optional[str]:
        return pulumi.get(self, "what")

    @what.setter
    def what(self, value: Optional[str]):
        pulumi.set(self, "what", value)


@pulumi.input_type
class SyntheticsCheckThresholdMonitorArgs:
    def __init__(__self__, *,
                 comparison_type: Optional[str] = None,
                 matcher: Optional[str] = None,
                 metric_name: Optional[str] = None,
                 value: Optional[int] = None):
        if comparison_type is not None:
            pulumi.set(__self__, "comparison_type", comparison_type)
        if matcher is not None:
            pulumi.set(__self__, "matcher", matcher)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="comparisonType")
    def comparison_type(self) -> Optional[str]:
        return pulumi.get(self, "comparison_type")

    @comparison_type.setter
    def comparison_type(self, value: Optional[str]):
        pulumi.set(self, "comparison_type", value)

    @property
    @pulumi.getter
    def matcher(self) -> Optional[str]:
        return pulumi.get(self, "matcher")

    @matcher.setter
    def matcher(self, value: Optional[str]):
        pulumi.set(self, "matcher", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[int]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsCheckViewportArgs:
    def __init__(__self__, *,
                 height: Optional[int] = None,
                 width: Optional[int] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[int]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[int]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class SyntheticsDevicesV2CheckDeviceArgs:
    def __init__(__self__, *,
                 id: int,
                 label: str,
                 network_connections: Sequence['SyntheticsDevicesV2CheckDeviceNetworkConnectionArgs'],
                 user_agent: str,
                 viewport_height: int,
                 viewport_width: int):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "network_connections", network_connections)
        pulumi.set(__self__, "user_agent", user_agent)
        pulumi.set(__self__, "viewport_height", viewport_height)
        pulumi.set(__self__, "viewport_width", viewport_width)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: str):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter(name="networkConnections")
    def network_connections(self) -> Sequence['SyntheticsDevicesV2CheckDeviceNetworkConnectionArgs']:
        return pulumi.get(self, "network_connections")

    @network_connections.setter
    def network_connections(self, value: Sequence['SyntheticsDevicesV2CheckDeviceNetworkConnectionArgs']):
        pulumi.set(self, "network_connections", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> str:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: str):
        pulumi.set(self, "user_agent", value)

    @property
    @pulumi.getter(name="viewportHeight")
    def viewport_height(self) -> int:
        return pulumi.get(self, "viewport_height")

    @viewport_height.setter
    def viewport_height(self, value: int):
        pulumi.set(self, "viewport_height", value)

    @property
    @pulumi.getter(name="viewportWidth")
    def viewport_width(self) -> int:
        return pulumi.get(self, "viewport_width")

    @viewport_width.setter
    def viewport_width(self, value: int):
        pulumi.set(self, "viewport_width", value)


@pulumi.input_type
class SyntheticsDevicesV2CheckDeviceNetworkConnectionArgs:
    def __init__(__self__, *,
                 description: str,
                 download_bandwidth: int,
                 latency: int,
                 packet_loss: int,
                 upload_bandwidth: Optional[int] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "download_bandwidth", download_bandwidth)
        pulumi.set(__self__, "latency", latency)
        pulumi.set(__self__, "packet_loss", packet_loss)
        if upload_bandwidth is not None:
            pulumi.set(__self__, "upload_bandwidth", upload_bandwidth)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="downloadBandwidth")
    def download_bandwidth(self) -> int:
        return pulumi.get(self, "download_bandwidth")

    @download_bandwidth.setter
    def download_bandwidth(self, value: int):
        pulumi.set(self, "download_bandwidth", value)

    @property
    @pulumi.getter
    def latency(self) -> int:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: int):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="packetLoss")
    def packet_loss(self) -> int:
        return pulumi.get(self, "packet_loss")

    @packet_loss.setter
    def packet_loss(self, value: int):
        pulumi.set(self, "packet_loss", value)

    @property
    @pulumi.getter(name="uploadBandwidth")
    def upload_bandwidth(self) -> Optional[int]:
        return pulumi.get(self, "upload_bandwidth")

    @upload_bandwidth.setter
    def upload_bandwidth(self, value: Optional[int]):
        pulumi.set(self, "upload_bandwidth", value)


@pulumi.input_type
class SyntheticsHttpV2CheckTestArgs:
    def __init__(__self__, *,
                 active: bool,
                 body: str,
                 created_at: str,
                 frequency: int,
                 headers: Sequence['SyntheticsHttpV2CheckTestHeaderArgs'],
                 id: int,
                 name: str,
                 request_method: str,
                 scheduling_strategy: str,
                 type: str,
                 updated_at: str,
                 url: str,
                 location_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url", url)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: bool):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: str):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: str):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: int):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['SyntheticsHttpV2CheckTestHeaderArgs']:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Sequence['SyntheticsHttpV2CheckTestHeaderArgs']):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> str:
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: str):
        pulumi.set(self, "request_method", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: str):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: str):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: str):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "location_ids", value)


@pulumi.input_type
class SyntheticsHttpV2CheckTestHeaderArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsLocationV2CheckLocationArgs:
    def __init__(__self__, *,
                 country: str,
                 default: bool,
                 id: str,
                 label: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: str):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: bool):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: str):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsLocationV2CheckMetaArgs:
    def __init__(__self__, *,
                 active_test_ids: Sequence[int],
                 paused_test_ids: Sequence[int]):
        pulumi.set(__self__, "active_test_ids", active_test_ids)
        pulumi.set(__self__, "paused_test_ids", paused_test_ids)

    @property
    @pulumi.getter(name="activeTestIds")
    def active_test_ids(self) -> Sequence[int]:
        return pulumi.get(self, "active_test_ids")

    @active_test_ids.setter
    def active_test_ids(self, value: Sequence[int]):
        pulumi.set(self, "active_test_ids", value)

    @property
    @pulumi.getter(name="pausedTestIds")
    def paused_test_ids(self) -> Sequence[int]:
        return pulumi.get(self, "paused_test_ids")

    @paused_test_ids.setter
    def paused_test_ids(self, value: Sequence[int]):
        pulumi.set(self, "paused_test_ids", value)


@pulumi.input_type
class SyntheticsLocationsV2CheckLocationArgs:
    def __init__(__self__, *,
                 country: str,
                 default: bool,
                 id: str,
                 label: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: str):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: bool):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: str):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsPortV2CheckTestArgs:
    def __init__(__self__, *,
                 active: bool,
                 created_at: str,
                 frequency: int,
                 host: str,
                 id: int,
                 name: str,
                 port: int,
                 protocol: str,
                 scheduling_strategy: str,
                 type: str,
                 updated_at: str,
                 location_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        if location_ids is not None:
            pulumi.set(__self__, "location_ids", location_ids)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: bool):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: str):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: int):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: str):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: int):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: str):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> str:
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: str):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: str):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="locationIds")
    def location_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "location_ids")

    @location_ids.setter
    def location_ids(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "location_ids", value)


@pulumi.input_type
class SyntheticsVariableV2CheckVariableArgs:
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 id: int,
                 name: str,
                 secret: bool,
                 updated_at: str,
                 value: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: str):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> bool:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: bool):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: str):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsVariablesV2CheckVariableArgs:
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 id: int,
                 name: str,
                 secret: bool,
                 updated_at: str,
                 value: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: str):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def secret(self) -> bool:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: bool):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: str):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


