# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'SyntheticsLocationsV2CheckResult',
    'AwaitableSyntheticsLocationsV2CheckResult',
    'synthetics_locations_v2_check',
    'synthetics_locations_v2_check_output',
]

@pulumi.output_type
class SyntheticsLocationsV2CheckResult:
    """
    A collection of values returned by syntheticsLocationsV2Check.
    """
    def __init__(__self__, default_location_ids=None, id=None, locations=None):
        if default_location_ids and not isinstance(default_location_ids, list):
            raise TypeError("Expected argument 'default_location_ids' to be a list")
        pulumi.set(__self__, "default_location_ids", default_location_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter(name="defaultLocationIds")
    def default_location_ids(self) -> Sequence[str]:
        return pulumi.get(self, "default_location_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.SyntheticsLocationsV2CheckLocationResult']]:
        return pulumi.get(self, "locations")


class AwaitableSyntheticsLocationsV2CheckResult(SyntheticsLocationsV2CheckResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SyntheticsLocationsV2CheckResult(
            default_location_ids=self.default_location_ids,
            id=self.id,
            locations=self.locations)


def synthetics_locations_v2_check(locations: Optional[Sequence[pulumi.InputType['SyntheticsLocationsV2CheckLocationArgs']]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSyntheticsLocationsV2CheckResult:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_synthetics as synthetics

    datasource_locations = synthetics.synthetics_locations_v2_check(locations=[synthetics.SyntheticsLocationsV2CheckLocationArgs()])
    ```
    <!--End PulumiCodeChooser -->
    """
    __args__ = dict()
    __args__['locations'] = locations
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('synthetics:index/syntheticsLocationsV2Check:syntheticsLocationsV2Check', __args__, opts=opts, typ=SyntheticsLocationsV2CheckResult).value

    return AwaitableSyntheticsLocationsV2CheckResult(
        default_location_ids=pulumi.get(__ret__, 'default_location_ids'),
        id=pulumi.get(__ret__, 'id'),
        locations=pulumi.get(__ret__, 'locations'))


@_utilities.lift_output_func(synthetics_locations_v2_check)
def synthetics_locations_v2_check_output(locations: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsLocationsV2CheckLocationArgs']]]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SyntheticsLocationsV2CheckResult]:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_synthetics as synthetics

    datasource_locations = synthetics.synthetics_locations_v2_check(locations=[synthetics.SyntheticsLocationsV2CheckLocationArgs()])
    ```
    <!--End PulumiCodeChooser -->
    """
    ...
