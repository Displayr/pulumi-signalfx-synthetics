# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'SyntheticsCheckResult',
    'AwaitableSyntheticsCheckResult',
    'synthetics_check',
    'synthetics_check_output',
]

@pulumi.output_type
class SyntheticsCheckResult:
    """
    A collection of values returned by syntheticsCheck.
    """
    def __init__(__self__, auto_retry=None, blackout_periods=None, browsers=None, check_connections=None, cookies=None, created_at=None, dns_overrides=None, enabled=None, excluded_files=None, frequency=None, http_method=None, http_request_body=None, http_request_headers=None, id=None, integrations=None, javascript_files=None, links=None, locations=None, muted=None, name=None, notifications=None, paused=None, response_time_monitor_milliseconds=None, round_robin=None, statuses=None, steps=None, success_criterias=None, tags=None, threshold_monitors=None, type=None, updated_at=None, url=None, viewports=None):
        if auto_retry and not isinstance(auto_retry, bool):
            raise TypeError("Expected argument 'auto_retry' to be a bool")
        pulumi.set(__self__, "auto_retry", auto_retry)
        if blackout_periods and not isinstance(blackout_periods, list):
            raise TypeError("Expected argument 'blackout_periods' to be a list")
        pulumi.set(__self__, "blackout_periods", blackout_periods)
        if browsers and not isinstance(browsers, list):
            raise TypeError("Expected argument 'browsers' to be a list")
        pulumi.set(__self__, "browsers", browsers)
        if check_connections and not isinstance(check_connections, list):
            raise TypeError("Expected argument 'check_connections' to be a list")
        pulumi.set(__self__, "check_connections", check_connections)
        if cookies and not isinstance(cookies, list):
            raise TypeError("Expected argument 'cookies' to be a list")
        pulumi.set(__self__, "cookies", cookies)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dns_overrides and not isinstance(dns_overrides, list):
            raise TypeError("Expected argument 'dns_overrides' to be a list")
        pulumi.set(__self__, "dns_overrides", dns_overrides)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if excluded_files and not isinstance(excluded_files, list):
            raise TypeError("Expected argument 'excluded_files' to be a list")
        pulumi.set(__self__, "excluded_files", excluded_files)
        if frequency and not isinstance(frequency, int):
            raise TypeError("Expected argument 'frequency' to be a int")
        pulumi.set(__self__, "frequency", frequency)
        if http_method and not isinstance(http_method, str):
            raise TypeError("Expected argument 'http_method' to be a str")
        pulumi.set(__self__, "http_method", http_method)
        if http_request_body and not isinstance(http_request_body, str):
            raise TypeError("Expected argument 'http_request_body' to be a str")
        pulumi.set(__self__, "http_request_body", http_request_body)
        if http_request_headers and not isinstance(http_request_headers, list):
            raise TypeError("Expected argument 'http_request_headers' to be a list")
        pulumi.set(__self__, "http_request_headers", http_request_headers)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if integrations and not isinstance(integrations, list):
            raise TypeError("Expected argument 'integrations' to be a list")
        pulumi.set(__self__, "integrations", integrations)
        if javascript_files and not isinstance(javascript_files, list):
            raise TypeError("Expected argument 'javascript_files' to be a list")
        pulumi.set(__self__, "javascript_files", javascript_files)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if muted and not isinstance(muted, bool):
            raise TypeError("Expected argument 'muted' to be a bool")
        pulumi.set(__self__, "muted", muted)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        pulumi.set(__self__, "notifications", notifications)
        if paused and not isinstance(paused, bool):
            raise TypeError("Expected argument 'paused' to be a bool")
        pulumi.set(__self__, "paused", paused)
        if response_time_monitor_milliseconds and not isinstance(response_time_monitor_milliseconds, int):
            raise TypeError("Expected argument 'response_time_monitor_milliseconds' to be a int")
        pulumi.set(__self__, "response_time_monitor_milliseconds", response_time_monitor_milliseconds)
        if round_robin and not isinstance(round_robin, bool):
            raise TypeError("Expected argument 'round_robin' to be a bool")
        pulumi.set(__self__, "round_robin", round_robin)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if steps and not isinstance(steps, list):
            raise TypeError("Expected argument 'steps' to be a list")
        pulumi.set(__self__, "steps", steps)
        if success_criterias and not isinstance(success_criterias, list):
            raise TypeError("Expected argument 'success_criterias' to be a list")
        pulumi.set(__self__, "success_criterias", success_criterias)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if threshold_monitors and not isinstance(threshold_monitors, list):
            raise TypeError("Expected argument 'threshold_monitors' to be a list")
        pulumi.set(__self__, "threshold_monitors", threshold_monitors)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if viewports and not isinstance(viewports, list):
            raise TypeError("Expected argument 'viewports' to be a list")
        pulumi.set(__self__, "viewports", viewports)

    @property
    @pulumi.getter(name="autoRetry")
    def auto_retry(self) -> bool:
        return pulumi.get(self, "auto_retry")

    @property
    @pulumi.getter(name="blackoutPeriods")
    def blackout_periods(self) -> Sequence['outputs.SyntheticsCheckBlackoutPeriodResult']:
        return pulumi.get(self, "blackout_periods")

    @property
    @pulumi.getter
    def browsers(self) -> Optional[Sequence['outputs.SyntheticsCheckBrowserResult']]:
        return pulumi.get(self, "browsers")

    @property
    @pulumi.getter(name="checkConnections")
    def check_connections(self) -> Sequence['outputs.SyntheticsCheckCheckConnectionResult']:
        return pulumi.get(self, "check_connections")

    @property
    @pulumi.getter
    def cookies(self) -> Optional[Sequence['outputs.SyntheticsCheckCookieResult']]:
        return pulumi.get(self, "cookies")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dnsOverrides")
    def dns_overrides(self) -> Optional[Sequence['outputs.SyntheticsCheckDnsOverrideResult']]:
        return pulumi.get(self, "dns_overrides")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludedFiles")
    def excluded_files(self) -> Optional[Sequence['outputs.SyntheticsCheckExcludedFileResult']]:
        return pulumi.get(self, "excluded_files")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> str:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> str:
        return pulumi.get(self, "http_request_body")

    @property
    @pulumi.getter(name="httpRequestHeaders")
    def http_request_headers(self) -> Sequence['outputs.SyntheticsCheckHttpRequestHeaderResult']:
        return pulumi.get(self, "http_request_headers")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def integrations(self) -> Sequence['outputs.SyntheticsCheckIntegrationResult']:
        return pulumi.get(self, "integrations")

    @property
    @pulumi.getter(name="javascriptFiles")
    def javascript_files(self) -> Optional[Sequence['outputs.SyntheticsCheckJavascriptFileResult']]:
        return pulumi.get(self, "javascript_files")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.SyntheticsCheckLinkResult']:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.SyntheticsCheckLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def muted(self) -> bool:
        return pulumi.get(self, "muted")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def notifications(self) -> Sequence['outputs.SyntheticsCheckNotificationResult']:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter
    def paused(self) -> bool:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="responseTimeMonitorMilliseconds")
    def response_time_monitor_milliseconds(self) -> int:
        return pulumi.get(self, "response_time_monitor_milliseconds")

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> bool:
        return pulumi.get(self, "round_robin")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.SyntheticsCheckStatusResult']:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.SyntheticsCheckStepResult']]:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="successCriterias")
    def success_criterias(self) -> Sequence['outputs.SyntheticsCheckSuccessCriteriaResult']:
        return pulumi.get(self, "success_criterias")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.SyntheticsCheckTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="thresholdMonitors")
    def threshold_monitors(self) -> Optional[Sequence['outputs.SyntheticsCheckThresholdMonitorResult']]:
        return pulumi.get(self, "threshold_monitors")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def viewports(self) -> Optional[Sequence['outputs.SyntheticsCheckViewportResult']]:
        return pulumi.get(self, "viewports")


class AwaitableSyntheticsCheckResult(SyntheticsCheckResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return SyntheticsCheckResult(
            auto_retry=self.auto_retry,
            blackout_periods=self.blackout_periods,
            browsers=self.browsers,
            check_connections=self.check_connections,
            cookies=self.cookies,
            created_at=self.created_at,
            dns_overrides=self.dns_overrides,
            enabled=self.enabled,
            excluded_files=self.excluded_files,
            frequency=self.frequency,
            http_method=self.http_method,
            http_request_body=self.http_request_body,
            http_request_headers=self.http_request_headers,
            id=self.id,
            integrations=self.integrations,
            javascript_files=self.javascript_files,
            links=self.links,
            locations=self.locations,
            muted=self.muted,
            name=self.name,
            notifications=self.notifications,
            paused=self.paused,
            response_time_monitor_milliseconds=self.response_time_monitor_milliseconds,
            round_robin=self.round_robin,
            statuses=self.statuses,
            steps=self.steps,
            success_criterias=self.success_criterias,
            tags=self.tags,
            threshold_monitors=self.threshold_monitors,
            type=self.type,
            updated_at=self.updated_at,
            url=self.url,
            viewports=self.viewports)


def synthetics_check(browsers: Optional[Sequence[pulumi.InputType['SyntheticsCheckBrowserArgs']]] = None,
                     check_connections: Optional[Sequence[pulumi.InputType['SyntheticsCheckCheckConnectionArgs']]] = None,
                     cookies: Optional[Sequence[pulumi.InputType['SyntheticsCheckCookieArgs']]] = None,
                     created_at: Optional[str] = None,
                     dns_overrides: Optional[Sequence[pulumi.InputType['SyntheticsCheckDnsOverrideArgs']]] = None,
                     excluded_files: Optional[Sequence[pulumi.InputType['SyntheticsCheckExcludedFileArgs']]] = None,
                     frequency: Optional[int] = None,
                     id: Optional[int] = None,
                     javascript_files: Optional[Sequence[pulumi.InputType['SyntheticsCheckJavascriptFileArgs']]] = None,
                     links: Optional[Sequence[pulumi.InputType['SyntheticsCheckLinkArgs']]] = None,
                     muted: Optional[bool] = None,
                     paused: Optional[bool] = None,
                     response_time_monitor_milliseconds: Optional[int] = None,
                     steps: Optional[Sequence[pulumi.InputType['SyntheticsCheckStepArgs']]] = None,
                     threshold_monitors: Optional[Sequence[pulumi.InputType['SyntheticsCheckThresholdMonitorArgs']]] = None,
                     type: Optional[str] = None,
                     updated_at: Optional[str] = None,
                     viewports: Optional[Sequence[pulumi.InputType['SyntheticsCheckViewportArgs']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableSyntheticsCheckResult:
    """
    **Note**: This is a Rigor (Legacy) data source
    """
    __args__ = dict()
    __args__['browsers'] = browsers
    __args__['checkConnections'] = check_connections
    __args__['cookies'] = cookies
    __args__['createdAt'] = created_at
    __args__['dnsOverrides'] = dns_overrides
    __args__['excludedFiles'] = excluded_files
    __args__['frequency'] = frequency
    __args__['id'] = id
    __args__['javascriptFiles'] = javascript_files
    __args__['links'] = links
    __args__['muted'] = muted
    __args__['paused'] = paused
    __args__['responseTimeMonitorMilliseconds'] = response_time_monitor_milliseconds
    __args__['steps'] = steps
    __args__['thresholdMonitors'] = threshold_monitors
    __args__['type'] = type
    __args__['updatedAt'] = updated_at
    __args__['viewports'] = viewports
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('synthetics:index/syntheticsCheck:syntheticsCheck', __args__, opts=opts, typ=SyntheticsCheckResult).value

    return AwaitableSyntheticsCheckResult(
        auto_retry=pulumi.get(__ret__, 'auto_retry'),
        blackout_periods=pulumi.get(__ret__, 'blackout_periods'),
        browsers=pulumi.get(__ret__, 'browsers'),
        check_connections=pulumi.get(__ret__, 'check_connections'),
        cookies=pulumi.get(__ret__, 'cookies'),
        created_at=pulumi.get(__ret__, 'created_at'),
        dns_overrides=pulumi.get(__ret__, 'dns_overrides'),
        enabled=pulumi.get(__ret__, 'enabled'),
        excluded_files=pulumi.get(__ret__, 'excluded_files'),
        frequency=pulumi.get(__ret__, 'frequency'),
        http_method=pulumi.get(__ret__, 'http_method'),
        http_request_body=pulumi.get(__ret__, 'http_request_body'),
        http_request_headers=pulumi.get(__ret__, 'http_request_headers'),
        id=pulumi.get(__ret__, 'id'),
        integrations=pulumi.get(__ret__, 'integrations'),
        javascript_files=pulumi.get(__ret__, 'javascript_files'),
        links=pulumi.get(__ret__, 'links'),
        locations=pulumi.get(__ret__, 'locations'),
        muted=pulumi.get(__ret__, 'muted'),
        name=pulumi.get(__ret__, 'name'),
        notifications=pulumi.get(__ret__, 'notifications'),
        paused=pulumi.get(__ret__, 'paused'),
        response_time_monitor_milliseconds=pulumi.get(__ret__, 'response_time_monitor_milliseconds'),
        round_robin=pulumi.get(__ret__, 'round_robin'),
        statuses=pulumi.get(__ret__, 'statuses'),
        steps=pulumi.get(__ret__, 'steps'),
        success_criterias=pulumi.get(__ret__, 'success_criterias'),
        tags=pulumi.get(__ret__, 'tags'),
        threshold_monitors=pulumi.get(__ret__, 'threshold_monitors'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        url=pulumi.get(__ret__, 'url'),
        viewports=pulumi.get(__ret__, 'viewports'))


@_utilities.lift_output_func(synthetics_check)
def synthetics_check_output(browsers: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckBrowserArgs']]]]] = None,
                            check_connections: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckCheckConnectionArgs']]]]] = None,
                            cookies: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckCookieArgs']]]]] = None,
                            created_at: Optional[pulumi.Input[Optional[str]]] = None,
                            dns_overrides: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckDnsOverrideArgs']]]]] = None,
                            excluded_files: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckExcludedFileArgs']]]]] = None,
                            frequency: Optional[pulumi.Input[Optional[int]]] = None,
                            id: Optional[pulumi.Input[int]] = None,
                            javascript_files: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckJavascriptFileArgs']]]]] = None,
                            links: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckLinkArgs']]]]] = None,
                            muted: Optional[pulumi.Input[Optional[bool]]] = None,
                            paused: Optional[pulumi.Input[Optional[bool]]] = None,
                            response_time_monitor_milliseconds: Optional[pulumi.Input[Optional[int]]] = None,
                            steps: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckStepArgs']]]]] = None,
                            threshold_monitors: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckThresholdMonitorArgs']]]]] = None,
                            type: Optional[pulumi.Input[Optional[str]]] = None,
                            updated_at: Optional[pulumi.Input[Optional[str]]] = None,
                            viewports: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['SyntheticsCheckViewportArgs']]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[SyntheticsCheckResult]:
    """
    **Note**: This is a Rigor (Legacy) data source
    """
    ...
