// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/yuft/pulumi-signalfx-synthetics/sdk/go/synthetics/internal"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/yuft/pulumi-signalfx-synthetics/sdk/go/synthetics"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := synthetics.NewSyntheticsCreatePortCheckV2(ctx, "portV2FooCheck", &synthetics.SyntheticsCreatePortCheckV2Args{
//				Tests: synthetics.SyntheticsCreatePortCheckV2TestArray{
//					&synthetics.SyntheticsCreatePortCheckV2TestArgs{
//						Active:    pulumi.Bool(true),
//						Frequency: pulumi.Int(5),
//						Host:      pulumi.String("www.splunk.com"),
//						LocationIds: pulumi.StringArray{
//							pulumi.String("aws-us-west-2"),
//						},
//						Name:               pulumi.String("Terraform - PORT V2 Checkaroo"),
//						Port:               pulumi.Int(8080),
//						Protocol:           pulumi.String("udp"),
//						SchedulingStrategy: pulumi.String("concurrent"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type SyntheticsCreatePortCheckV2 struct {
	pulumi.CustomResourceState

	Tests SyntheticsCreatePortCheckV2TestArrayOutput `pulumi:"tests"`
}

// NewSyntheticsCreatePortCheckV2 registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsCreatePortCheckV2(ctx *pulumi.Context,
	name string, args *SyntheticsCreatePortCheckV2Args, opts ...pulumi.ResourceOption) (*SyntheticsCreatePortCheckV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tests == nil {
		return nil, errors.New("invalid value for required argument 'Tests'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticsCreatePortCheckV2
	err := ctx.RegisterResource("synthetics:index/syntheticsCreatePortCheckV2:SyntheticsCreatePortCheckV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsCreatePortCheckV2 gets an existing SyntheticsCreatePortCheckV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsCreatePortCheckV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsCreatePortCheckV2State, opts ...pulumi.ResourceOption) (*SyntheticsCreatePortCheckV2, error) {
	var resource SyntheticsCreatePortCheckV2
	err := ctx.ReadResource("synthetics:index/syntheticsCreatePortCheckV2:SyntheticsCreatePortCheckV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsCreatePortCheckV2 resources.
type syntheticsCreatePortCheckV2State struct {
	Tests []SyntheticsCreatePortCheckV2Test `pulumi:"tests"`
}

type SyntheticsCreatePortCheckV2State struct {
	Tests SyntheticsCreatePortCheckV2TestArrayInput
}

func (SyntheticsCreatePortCheckV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsCreatePortCheckV2State)(nil)).Elem()
}

type syntheticsCreatePortCheckV2Args struct {
	Tests []SyntheticsCreatePortCheckV2Test `pulumi:"tests"`
}

// The set of arguments for constructing a SyntheticsCreatePortCheckV2 resource.
type SyntheticsCreatePortCheckV2Args struct {
	Tests SyntheticsCreatePortCheckV2TestArrayInput
}

func (SyntheticsCreatePortCheckV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsCreatePortCheckV2Args)(nil)).Elem()
}

type SyntheticsCreatePortCheckV2Input interface {
	pulumi.Input

	ToSyntheticsCreatePortCheckV2Output() SyntheticsCreatePortCheckV2Output
	ToSyntheticsCreatePortCheckV2OutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2Output
}

func (*SyntheticsCreatePortCheckV2) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsCreatePortCheckV2)(nil)).Elem()
}

func (i *SyntheticsCreatePortCheckV2) ToSyntheticsCreatePortCheckV2Output() SyntheticsCreatePortCheckV2Output {
	return i.ToSyntheticsCreatePortCheckV2OutputWithContext(context.Background())
}

func (i *SyntheticsCreatePortCheckV2) ToSyntheticsCreatePortCheckV2OutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsCreatePortCheckV2Output)
}

// SyntheticsCreatePortCheckV2ArrayInput is an input type that accepts SyntheticsCreatePortCheckV2Array and SyntheticsCreatePortCheckV2ArrayOutput values.
// You can construct a concrete instance of `SyntheticsCreatePortCheckV2ArrayInput` via:
//
//	SyntheticsCreatePortCheckV2Array{ SyntheticsCreatePortCheckV2Args{...} }
type SyntheticsCreatePortCheckV2ArrayInput interface {
	pulumi.Input

	ToSyntheticsCreatePortCheckV2ArrayOutput() SyntheticsCreatePortCheckV2ArrayOutput
	ToSyntheticsCreatePortCheckV2ArrayOutputWithContext(context.Context) SyntheticsCreatePortCheckV2ArrayOutput
}

type SyntheticsCreatePortCheckV2Array []SyntheticsCreatePortCheckV2Input

func (SyntheticsCreatePortCheckV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticsCreatePortCheckV2)(nil)).Elem()
}

func (i SyntheticsCreatePortCheckV2Array) ToSyntheticsCreatePortCheckV2ArrayOutput() SyntheticsCreatePortCheckV2ArrayOutput {
	return i.ToSyntheticsCreatePortCheckV2ArrayOutputWithContext(context.Background())
}

func (i SyntheticsCreatePortCheckV2Array) ToSyntheticsCreatePortCheckV2ArrayOutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsCreatePortCheckV2ArrayOutput)
}

// SyntheticsCreatePortCheckV2MapInput is an input type that accepts SyntheticsCreatePortCheckV2Map and SyntheticsCreatePortCheckV2MapOutput values.
// You can construct a concrete instance of `SyntheticsCreatePortCheckV2MapInput` via:
//
//	SyntheticsCreatePortCheckV2Map{ "key": SyntheticsCreatePortCheckV2Args{...} }
type SyntheticsCreatePortCheckV2MapInput interface {
	pulumi.Input

	ToSyntheticsCreatePortCheckV2MapOutput() SyntheticsCreatePortCheckV2MapOutput
	ToSyntheticsCreatePortCheckV2MapOutputWithContext(context.Context) SyntheticsCreatePortCheckV2MapOutput
}

type SyntheticsCreatePortCheckV2Map map[string]SyntheticsCreatePortCheckV2Input

func (SyntheticsCreatePortCheckV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticsCreatePortCheckV2)(nil)).Elem()
}

func (i SyntheticsCreatePortCheckV2Map) ToSyntheticsCreatePortCheckV2MapOutput() SyntheticsCreatePortCheckV2MapOutput {
	return i.ToSyntheticsCreatePortCheckV2MapOutputWithContext(context.Background())
}

func (i SyntheticsCreatePortCheckV2Map) ToSyntheticsCreatePortCheckV2MapOutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsCreatePortCheckV2MapOutput)
}

type SyntheticsCreatePortCheckV2Output struct{ *pulumi.OutputState }

func (SyntheticsCreatePortCheckV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticsCreatePortCheckV2)(nil)).Elem()
}

func (o SyntheticsCreatePortCheckV2Output) ToSyntheticsCreatePortCheckV2Output() SyntheticsCreatePortCheckV2Output {
	return o
}

func (o SyntheticsCreatePortCheckV2Output) ToSyntheticsCreatePortCheckV2OutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2Output {
	return o
}

func (o SyntheticsCreatePortCheckV2Output) Tests() SyntheticsCreatePortCheckV2TestArrayOutput {
	return o.ApplyT(func(v *SyntheticsCreatePortCheckV2) SyntheticsCreatePortCheckV2TestArrayOutput { return v.Tests }).(SyntheticsCreatePortCheckV2TestArrayOutput)
}

type SyntheticsCreatePortCheckV2ArrayOutput struct{ *pulumi.OutputState }

func (SyntheticsCreatePortCheckV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticsCreatePortCheckV2)(nil)).Elem()
}

func (o SyntheticsCreatePortCheckV2ArrayOutput) ToSyntheticsCreatePortCheckV2ArrayOutput() SyntheticsCreatePortCheckV2ArrayOutput {
	return o
}

func (o SyntheticsCreatePortCheckV2ArrayOutput) ToSyntheticsCreatePortCheckV2ArrayOutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2ArrayOutput {
	return o
}

func (o SyntheticsCreatePortCheckV2ArrayOutput) Index(i pulumi.IntInput) SyntheticsCreatePortCheckV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyntheticsCreatePortCheckV2 {
		return vs[0].([]*SyntheticsCreatePortCheckV2)[vs[1].(int)]
	}).(SyntheticsCreatePortCheckV2Output)
}

type SyntheticsCreatePortCheckV2MapOutput struct{ *pulumi.OutputState }

func (SyntheticsCreatePortCheckV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticsCreatePortCheckV2)(nil)).Elem()
}

func (o SyntheticsCreatePortCheckV2MapOutput) ToSyntheticsCreatePortCheckV2MapOutput() SyntheticsCreatePortCheckV2MapOutput {
	return o
}

func (o SyntheticsCreatePortCheckV2MapOutput) ToSyntheticsCreatePortCheckV2MapOutputWithContext(ctx context.Context) SyntheticsCreatePortCheckV2MapOutput {
	return o
}

func (o SyntheticsCreatePortCheckV2MapOutput) MapIndex(k pulumi.StringInput) SyntheticsCreatePortCheckV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyntheticsCreatePortCheckV2 {
		return vs[0].(map[string]*SyntheticsCreatePortCheckV2)[vs[1].(string)]
	}).(SyntheticsCreatePortCheckV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsCreatePortCheckV2Input)(nil)).Elem(), &SyntheticsCreatePortCheckV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsCreatePortCheckV2ArrayInput)(nil)).Elem(), SyntheticsCreatePortCheckV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticsCreatePortCheckV2MapInput)(nil)).Elem(), SyntheticsCreatePortCheckV2Map{})
	pulumi.RegisterOutputType(SyntheticsCreatePortCheckV2Output{})
	pulumi.RegisterOutputType(SyntheticsCreatePortCheckV2ArrayOutput{})
	pulumi.RegisterOutputType(SyntheticsCreatePortCheckV2MapOutput{})
}
