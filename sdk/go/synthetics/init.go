// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package synthetics

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/displayr/pulumi-signalfx-synthetics/sdk/go/synthetics/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "synthetics:index/syntheticsCreateApiCheckV2:SyntheticsCreateApiCheckV2":
		r = &SyntheticsCreateApiCheckV2{}
	case "synthetics:index/syntheticsCreateBrowserCheck:SyntheticsCreateBrowserCheck":
		r = &SyntheticsCreateBrowserCheck{}
	case "synthetics:index/syntheticsCreateBrowserCheckV2:SyntheticsCreateBrowserCheckV2":
		r = &SyntheticsCreateBrowserCheckV2{}
	case "synthetics:index/syntheticsCreateHttpCheck:SyntheticsCreateHttpCheck":
		r = &SyntheticsCreateHttpCheck{}
	case "synthetics:index/syntheticsCreateHttpCheckV2:SyntheticsCreateHttpCheckV2":
		r = &SyntheticsCreateHttpCheckV2{}
	case "synthetics:index/syntheticsCreateLocationV2:SyntheticsCreateLocationV2":
		r = &SyntheticsCreateLocationV2{}
	case "synthetics:index/syntheticsCreatePortCheckV2:SyntheticsCreatePortCheckV2":
		r = &SyntheticsCreatePortCheckV2{}
	case "synthetics:index/syntheticsCreateVariableV2:SyntheticsCreateVariableV2":
		r = &SyntheticsCreateVariableV2{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:synthetics" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateApiCheckV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateBrowserCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateBrowserCheckV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateHttpCheck",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateHttpCheckV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateLocationV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreatePortCheckV2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"synthetics",
		"index/syntheticsCreateVariableV2",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"synthetics",
		&pkg{version},
	)
}
